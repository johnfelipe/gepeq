<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="deployall" name="gepeq">
	<!-- Properties used for building class files -->
    <property environment="env"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>
	<property name="encoding" value="cp1252"/>
	
	<!-- ant-contrib (required version 0.6 or greater) -->
	<!-- Needed because defines some ant tasks used in this build.xml file (if, for, propertycopy, ...) -->
	<property name="ant-contrib.lib" value="libs/ant-contrib"/> <!-- Directory where ant-contrib library is located -->
    <property name="ant-contrib.lib.name" value="ant-contrib-0.6.jar"/> <!-- ant-contrib library file name-->
    <property name="ant-contrib.properties" value="net/sf/antcontrib/antcontrib.properties"/> <!-- Path to antcontrib.properties configuration file within ant-contrib library -->
    <!-- Load ant-contrib library -->
	<taskdef resource="${ant-contrib.properties}">
      <classpath>
        <pathelement location="${ant-contrib.lib}/${ant-contrib.lib.name}" />
      </classpath>
    </taskdef>
	
    <!-- Libraries paths -->
    <property name="servlet-api.lib" value="libs/servlet-api"/> <!-- Directory where servlet-api library is located -->
    <property name="servlet-api.lib.name" value="servlet-api.jar"/> <!-- servlet-api library file name -->
	<property name="jaf.lib" value="libs/jaf"/> <!-- Directory where JAF library is located -->
	<property name="jaf.lib.name" value="activation.jar"/> <!-- JAF library file name -->
	<property name="javamail.lib" value="libs/javamail"/> <!-- Directory where javamail library is located -->
	<property name="javamail.lib.name" value="mail.jar"/> <!-- javamail library file name -->
    <property name="el22-api.lib" value="libs/el22"/> <!-- Directory where EL 2.2 API library is located -->
    <property name="el22-api.lib.name" value="el-api-2.2.jar"/> <!-- EL 2.2 API library file name -->
    <property name="el22-imp.lib" value="libs/el22"/> <!-- Directory where EL 2.2 implementation library is located -->
    <property name="el22-imp.lib.name" value="jboss-el-2.0.0.GA.jar"/> <!-- EL 2.2 implementation library file name -->
	<property name="jsf.lib" value="libs/jsf"/> <!-- Directory where JSF 2 library is located -->
    <property name="jsf.lib.name" value="javax.faces.jar"/> <!-- JSF 2 library file name -->
	<property name="hibernate.lib" value="libs/hibernate"/> <!-- Directory where Hibernate library is located -->
	<property name="hibernate.lib.name" value="hibernate3.jar"/> <!-- Hibernate library file name -->
    <property name="hibernate-jpa.lib" value="libs/hibernate"/> <!-- Directory where Hibernate JPA library is located -->
    <property name="hibernate-jpa.lib.name" value="hibernate-jpa-2.0-api-1.0.0.Final.jar"/> <!-- Hibernate JPA library file name -->
	<property name="encryption.lib" value="libs/encryption"/> <!-- Directory where encryption library is located -->
    <property name="encryption.lib.name" value="encryption.jar"/> <!-- Encryption library file name -->
	<property name="primefaces.lib" value="libs/primefaces"/> <!-- Directory where Primefaces library is located -->
	<property name="primefaces.lib.name" value="primefaces.jar"/> <!-- Primefaces library file name -->
	<property name="commons-collections.lib" value="libs/apache-commons"/> <!-- Directory where Apache Commons Collections library is located -->
	<property name="commons-collections.lib.name" value="commons-collections-3.2.1.jar"/> <!-- Apache Commons Collections library file name -->
    <property name="commons-fileupload.lib" value="libs/apache-commons"/> <!-- Directory where Apache Commons Fileupload library is located -->
    <property name="commons-fileupload.lib.name" value="commons-fileupload-1.2.2.jar"/> <!-- Apache Commons Fileupload library file name -->
	<property name="commons-io.lib" value="libs/apache-commons"/> <!-- Directory where Apache Commons IO library is located -->
    <property name="commons-io.lib.name" value="commons-io-2.0.1.jar"/> <!-- Apache Commons IO library file name -->
	<property name="commons-lang.lib" value="libs/apache-commons"/> <!-- Directory where Apache Commons Lang library is located -->
	<property name="commons-lang.lib.name" value="commons-lang-2.4.jar"/> <!-- Apache Commons Lang library file name -->
    <property name="commons-logging.lib" value="libs/apache-commons"/> <!-- Directory where Apache Commons Logging library is located -->
    <property name="commons-logging.lib.name" value="commons-logging-1.1.1.jar"/> <!-- Apache Commons Loggin library file name -->
	<property name="commons-discovery.lib" value="libs/apache-commons"/> <!-- Directory where Apache Commons Discovery library is located -->
	<property name="commons-discovery.lib.name" value="commons-discovery-0.2.jar"/> <!-- Apache Commons Discovery library file name -->
    <property name="commons-httpclient.lib" value="libs/apache-commons"/> <!-- Directory where Apache Commons HTTPClient library is located -->
	<property name="commons-httpclient.lib.name" value="commons-httpclient-3.0-rc2.jar"/> <!-- Apache Commons HTTPClient library file name -->
    <property name="commons-annotations.lib" value="libs/apache-commons"/> <!-- Directory where Apache Commons Annotations library is located -->
    <property name="commons-annotations.lib.name" value="common-annotations.jar"/> <!-- Apache Commons Annotations library file name -->
	<property name="axis.lib" value="libs/axis"/> <!-- Directory where Apache Axis patched library is located -->
	<property name="axis.lib.name" value="axis-1.4.patched.jar"/> <!-- Apache Axis patched library file name -->
	<property name="jaxrpc.lib" value="libs/jaxrpc"/> <!-- Directory where JAXRPC library is located -->
    <property name="jaxrpc.lib.name" value="jaxrpc.jar"/> <!-- JAXRPC library file name -->
	<property name="jtidy.lib" value="libs/jtidy"/> <!-- Directory where JTidy library is located -->
	<property name="jtidy.lib.name" value="jtidy-r938.jar"/> <!-- JTidy library file name -->
	<property name="dom4j.lib" value="libs/dom4j"/> <!-- Directory where DOM4J library is located -->
	<property name="dom4j.lib.name" value="dom4j-1.6.1.jar"/> <!-- DOM4J library file name -->
	<property name="slf4j-api.lib" value="libs/slf4j"/> <!-- Directory where SLF4J API library is located -->
	<property name="slf4j-api.lib.name" value="slf4j-api-1.6.1.jar"/> <!-- SLF4J API library file name -->
	<property name="slf4j-imp.lib" value="libs/slf4j"/> <!-- Directory where SLF4J implementation library is located -->
    <property name="slf4j-imp.lib.name" value="slf4j-simple-1.6.1.jar"/> <!-- SLF4J implementation library file name -->
	<property name="javassist.lib" value="libs/javassist"/> <!-- Directory where Javassist library is located -->
	<property name="javassist.lib.name" value="javassist-3.12.0.GA.jar"/> <!-- Javassist library file name -->
	<property name="jta.lib" value="libs/jta"/> <!-- Directory where JTA library is located -->
	<property name="jta.lib.name" value="jta-1.1.jar"/> <!-- JTA library file name -->
	<property name="wsdl4j.lib" value="libs/wsdl4j"/> <!-- Directory where WSDL4J library is located -->
	<property name="wsdl4j.lib.name" value="wsdl4j.jar"/> <!-- WSDL4J library file name -->
	<property name="log4j.lib" value="libs/log4j"/> <!-- Directory where LOG4J library is located -->
	<property name="log4j.lib.name" value="log4j-1.2.16.jar"/> <!-- LOG4J library file name -->
	<property name="rome.lib" value="libs/rome"/> <!-- Directory where Apache Rome library is located -->
	<property name="rome.lib.name" value="rome-0.9.jar"/> <!-- Apache Rome library file name -->
    <property name="jstl-api.lib" value="libs/jstl"/> <!-- Directory where JSTL API library is located -->
    <property name="jstl-api.lib.name" value="jstl.jar"/> <!-- JSTL API library file name -->
    <property name="jstl-imp.lib" value="libs/jstl"/> <!-- Directory where JSTL implementation library is located -->
    <property name="jstl-imp.lib.name" value="standard.jar"/> <!-- JSTL implementation library file name -->
	<property name="saaj.lib" value="libs/saaj"/> <!-- Directory where SAAJ library is located -->
	<property name="saaj.lib.name" value="saaj.jar"/> <!-- SAAJ library file name -->
	<property name="antlr.lib" value="libs/antlr"/> <!-- Directory where ANTLR 2 library is located -->
	<property name="antlr.lib.name" value="antlr-2.7.6.jar"/> <!-- ANTLR 2 library file name -->
	
    <!-- Themes paths -->
    <property name="themes" value="aristo"/> <!-- List of themes included within Primefaces library -->
	<property name="additional-themes" value="blitzer,bluesky,casablanca,cupertino,eggplant,excite-bike,flick,glass-x,hot-sneaks,overcast,pepper-grinder,south-street,sunny,ui-lightness"/> <!-- List of additional themes added with a jar file -->
	<property name="themes.default" value="aristo"/> <!-- Default theme -->
	<property name="theme-aristo.display-name" value="Aristo"/> <!-- Aristo theme display name -->
    <property name="theme-blitzer.display-name" value="Blitzer"/> <!-- Blitzer theme display name -->
	<property name="theme-blitzer" value="libs/primefaces/themes"/> <!-- Directory where Blitzer theme jar file is located -->
    <property name="theme-blitzer.name" value="blitzer-1.0.2.jar"/> <!-- Blitzer theme jar file name -->
    <property name="theme-bluesky.display-name" value="Bluesky"/> <!-- Bluesky theme display name -->
    <property name="theme-bluesky" value="libs/primefaces/themes"/> <!-- Directory where Bluesky theme jar file is located -->
    <property name="theme-bluesky.name" value="bluesky-1.0.2.jar"/> <!-- Bluesky theme jar file name -->
    <property name="theme-casablanca.display-name" value="Casablanca"/> <!-- Casablanca theme display name -->
    <property name="theme-casablanca" value="libs/primefaces/themes"/> <!-- Directory where Casablanca theme jar file is located -->
    <property name="theme-casablanca.name" value="casablanca-1.0.2.jar"/> <!-- Casablanca theme jar file name -->
    <property name="theme-cupertino.display-name" value="Cupertino"/> <!-- Cupertino theme display name -->
    <property name="theme-cupertino" value="libs/primefaces/themes"/> <!-- Directory where Cupertino theme jar file is located -->
    <property name="theme-cupertino.name" value="cupertino-1.0.2.jar"/> <!-- Cupertino theme jar file name -->
    <property name="theme-eggplant.display-name" value="Eggplant"/> <!-- Eggplant theme display name -->
    <property name="theme-eggplant" value="libs/primefaces/themes"/> <!-- Directory where Eggplant theme jar file is located -->
    <property name="theme-eggplant.name" value="eggplant-1.0.2.jar"/> <!-- Eggplant theme jar file name -->
    <property name="theme-excite-bike.display-name" value="Excite-Bike"/> <!-- Excite-Bike theme display name -->
    <property name="theme-excite-bike" value="libs/primefaces/themes"/> <!-- Directory where Excite-Bike theme jar file is located -->
    <property name="theme-excite-bike.name" value="excite-bike-1.0.2.jar"/> <!-- Excite-Bike theme jar file name -->
    <property name="theme-flick.display-name" value="Flick"/> <!-- Flick theme display name -->
    <property name="theme-flick" value="libs/primefaces/themes"/> <!-- Directory where Flick theme jar file is located -->
    <property name="theme-flick.name" value="flick-1.0.2.jar"/> <!-- Flick theme jar file name -->
    <property name="theme-glass-x.display-name" value="Glass-X"/> <!-- Glass-X theme display name -->
    <property name="theme-glass-x" value="libs/primefaces/themes"/> <!-- Directory where Glass-X theme jar file is located -->
    <property name="theme-glass-x.name" value="glass-x-1.0.2.jar"/> <!-- Glass-X theme jar file name -->
    <property name="theme-hot-sneaks.display-name" value="Hot-Sneaks"/> <!-- Hot-Sneaks theme display name -->
    <property name="theme-hot-sneaks" value="libs/primefaces/themes"/> <!-- Directory where Hot-Sneaks theme jar file is located -->
    <property name="theme-hot-sneaks.name" value="hot-sneaks-1.0.2.jar"/> <!-- Hot-Sneaks theme jar file name -->
    <property name="theme-overcast.display-name" value="Overcast"/> <!-- Overcast theme display name -->
    <property name="theme-overcast" value="libs/primefaces/themes"/> <!-- Directory where Overcast theme jar file is located -->
    <property name="theme-overcast.name" value="overcast-1.0.2.jar"/> <!-- Overcast theme jar file name -->
    <property name="theme-pepper-grinder.display-name" value="Pepper-Grinder"/> <!-- Pepper-Grinder theme display name -->
    <property name="theme-pepper-grinder" value="libs/primefaces/themes"/> <!-- Directory where Pepper-Grinder theme jar file is located -->
    <property name="theme-pepper-grinder.name" value="pepper-grinder-1.0.2.jar"/> <!-- Pepper-Grinder theme jar file name -->
    <property name="theme-south-street.display-name" value="South-Street"/> <!-- South-Street theme display name -->
    <property name="theme-south-street" value="libs/primefaces/themes"/> <!-- Directory where South-Street theme jar file is located -->
    <property name="theme-south-street.name" value="south-street-1.0.2.jar"/> <!-- South-Street theme jar file name -->
    <property name="theme-sunny.display-name" value="Sunny"/> <!-- Sunny theme display name -->
    <property name="theme-sunny" value="libs/primefaces/themes"/> <!-- Directory where Sunny theme jar file is located -->
    <property name="theme-sunny.name" value="sunny-1.0.2.jar"/> <!-- Sunny theme jar file name -->
    <property name="theme-ui-lightness.display-name" value="UI-Lightness"/> <!-- UI-Lightness theme display name -->
    <property name="theme-ui-lightness" value="libs/primefaces/themes"/> <!-- Directory where UI-Lightness theme jar file is located -->
    <property name="theme-ui-lightness.name" value="ui-lightness-1.0.2.jar"/> <!-- UI-Lightness theme jar file name -->
	
	<!-- Source path -->
	<property name="src" value="src"/> <!-- Directory where Java source files are located -->
	
    <!-- Build paths -->
	<property name="build.classes" value="build/classes"/> <!-- Output directory for compiled classes -->
    <property name="build.jars" value="build/jars"/> <!-- Output directory for packed jars -->
    <property name="build.keep" value="build/keep"/> <!-- Directory to copy files from "keep-from" folders -->
	
	<property name="save-keep.done" value="false"/>
	
	<!-- Web Apps paths -->
    <property name="gepeq-webapp.input" value="WebContent"/> <!-- Input directory for OpenMark Authoring Tool web application (GEPEQ) -->
	<property name="gepeq-webapp.output" value="build/webapps/gepeq"/> <!-- Output directory for OpenMark Authoring Tool web application (GEPEQ) -->
	<property name="om-webapp.input" value="om/WebContent"/> <!-- Input directory for OpenMark Developer web application (om) -->
    <property name="om-webapp.output" value="build/webapps/om"/> <!-- Output directory for OpenMark Developer web application (om) -->
	<property name="om-qe-webapp.input" value="om-qe/WebContent"/> <!-- Input directory for OpenMark Question Engine web application for preview environment (om-qe) -->
    <property name="om-qe-webapp.output" value="build/webapps/om-qe"/> <!-- Output directory for OpenMark Question Engine web application for preview environment (om-qe) -->
    <property name="om-tn-webapp.input" value="om-tn/WebContent"/> <!-- Input directory for OpenMark Test Navigator web application for preview environment (om-tn) -->
    <property name="om-tn-webapp.output" value="build/webapps/om-tn"/> <!-- Output directory for OpenMark Test Navigator web application for preview environment (om-tn) -->
    <property name="om-qe-pro-webapp.input" value="om-qe-pro/WebContent"/> <!-- Input directory for OpenMark Question Engine web application for publication environment (om-qe-pro) -->
    <property name="om-qe-pro-webapp.output" value="build/webapps/om-qe-pro"/> <!-- Output directory for OpenMark Question Engine web application for publication environment (om-qe-pro) -->
    <property name="om-tn-pro-webapp.input" value="om-tn-pro/WebContent"/> <!-- Input directory for OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
    <property name="om-tn-pro-webapp.output" value="build/webapps/om-tn-pro"/> <!-- Output directory for OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
	
	<!-- Hibernate Configuration -->
    <property name="hibernate.conf" value="conf/gepeq/hibernate"/> <!-- Directory where Hibernate configuration template is located -->
	<property name="hibernate.conf.name" value="hibernate.cfg.xml"/> <!-- Hibernate configuration template file name -->
    <property name="hibernate.conf.src.name" value="hibernate.cfg.xml" /> <!-- Input Hibernate configuration file name -->
    <property name="hibernate.conf.dest" value="${build.classes}"/> <!-- Directory where derived Hibernate configuration file is deployed  -->
    <property name="hibernate.conf.dest.name" value="hibernate.cfg.xml" /> <!-- Derived Hibernate configuration file name -->
	<property name="hibernate.encryption" value="false"/> <!-- Boolean flag to enable (true) or disable (false) encryption within Hibernate configuration file -->
	<property name="hibernate.connection.provider.class" value="es.uned.lsi.gepec.util.hibernate.EncryptedDriverManagerConnectionProvider"/> <!-- Full class name for class used to add encryption support for Hibernate configuration file -->
	
    <!-- URL properties -->
    <property name="gepeq.url" value="http://localhost:8080/gepeq"/> <!-- OpenMark Authoring Tool URL (GEPEQ)-->
	<property name="om.url" value="http://localhost:8080/om"/> <!-- OpenMark Developer URL (om) -->
    <property name="om-qe.url" value="http://localhost:8080/om-qe"/> <!-- OpenMark Question Engine for preview environment URL (om-qe) -->
    <property name="om-tn.url" value="http://localhost:8080/om-tn"/> <!-- OpenMark Test Navigator for preview environment URL (om-tn) -->
    <property name="om-qe-pro.url" value="http://localhost:8080/om-qe-pro"/> <!-- OpenMark Question Engine for publication environment URL (om-qe-pro) -->
    <property name="om-tn-pro.url" value="http://localhost:8080/om-tn-pro"/> <!-- OpenMark Test Navigator for publication environment URL (om-tn-pro) -->
	
	<!-- OpenMark Authoring Tool DB properties (gepeq)-->
    <property name="gepeq.server" value="localhost"/> <!-- OpenMark Authoring Tool DB server -->
    <property name="gepeq.dbname" value="gepeq"/> <!-- OpenMark Authoring Tool DB name -->
    <property name="gepeq.username" value=""/> <!-- OpenMark Authoring Tool DB username -->
    <property name="gepeq.password" value=""/> <!-- OpenMark Authoring Tool DB password -->
	
    <!-- OpenMark Test Navigator for preview environment DB properties (om-tn) -->
    <property name="om-tn.server" value="localhost"/> <!-- OpenMark Test Navigator for preview environment DB server -->
    <property name="om-tn.dbname" value="om-tn"/> <!-- OpenMark Test Navigator for preview environment DB name -->
	<property name="om-tn.prefix" value="pre_"/> <!-- OpenMark Test Navigator for preview environment DB prefix for tables -->
    <property name="om-tn.username" value=""/> <!-- OpenMark Test Navigator for preview environment DB username -->
    <property name="om-tn.password" value=""/> <!-- OpenMark Test Navigator for preview environment DB password -->
	
    <!-- OpenMark Test Navigator for publication environment DB properties (om-tn-pro) -->
    <property name="om-tn-pro.server" value="localhost"/> <!-- OpenMark Test Navigator for publication environment DB server -->
    <property name="om-tn-pro.dbname" value="om-tn-pro"/> <!-- OpenMark Test Navigator for publication environment DB name -->
    <property name="om-tn-pro.prefix" value="pub_"/> <!-- OpenMark Test Navigator for publication environment DB prefix for tables -->
    <property name="om-tn-pro.username" value=""/> <!-- OpenMark Test Navigator for publication environment DB username -->
    <property name="om-tn-pro.password" value=""/> <!-- OpenMark Test Navigator for publication environment DB password -->
	
	<!-- DB libraries -->
	<property name="postgres.db.lib" value="libs/postgres"/> <!-- Directory where PostgreSQL library is located -->
    <property name="postgres.db.lib.name" value="postgresql-8.4-702.jdbc4.jar"/> <!-- PostgreSQL library file name -->
    <property name="postgres.db.lib.classname" value="org.postgresql.Driver"/> <!-- Full class name for class driver to support PostgreSQL -->
	
	<!-- Generic DB library -->
    <property name="generic.db.lib" value="${postgres.db.lib}"/> <!-- Directory where DB library is located -->
    <property name="generic.db.lib.name" value="${postgres.db.lib.name}"/> <!-- DB library file name -->
    <property name="generic.db.lib.classname" value="${postgres.db.lib.classname}"/> <!-- Full class name for class driver to support DB access -->
	
	<!-- Encryption properties -->
	<property name="encryption.asymmetric-encryptor.tool" value="encryption"/> <!-- Directory where asymmetric encryptor tool is located -->
    <property name="encryption.asymmetric-encryptor.tool.name" value="asymmetric-encryptor.jar"/> <!-- Asymmetric encryptor tool jar file name -->
    <property name="encryption.symmetric-encryptor.tool" value="encryption"/> <!-- Directory where symmetric encryptor tool is located -->
    <property name="encryption.symmetric-encryptor.tool.name" value="symmetric-encryptor.jar"/> <!-- Symmetric encryptor tool jar file name -->
	<property name="gepeq.encryption.enabled" value="false"/> <!-- Boolean flag to enable (true) or disable (false) encryption within OpenMark Authoring Tool configuration file -->
	<property name="gepeq.encryption.generate-keypair" value="false"/> <!-- Boolean flag to generate (true) or not (false) a new encryption key pair for OpenMark Authoring Tool -->
	<property name="gepeq.encryption.output" value="build/encryption/gepeq"/> <!-- Output directory for OpenMark Authoring Tool encryption -->
    <property name="gepeq.encryption.public-key" value=""/> <!-- Directory where public key (needed to encrypt) for OpenMark Authoring Tool is located -->
    <property name="gepeq.encryption.public-key.name" value="public.key"/> <!-- Public key for OpenMark Authoring Tool file name -->
    <property name="gepeq.encryption.private-key" value=""/> <!-- Directory where private key (needed to decrypt) for OpenMark Authoring Tool is located -->
    <property name="gepeq.encryption.private-key.name" value="private.key"/> <!-- Private key for OpenMark Authoring Tool file name -->
	<property name="om-tn.encryption.enabled" value="false"/> <!-- Boolean flag to enable (true) or disable (false) encryption within OpenMark Test Navigator for preview environment configuration file -->
	<property name="om-tn.encryption.generate-keypair" value="false"/> <!-- Boolean flag to generate (true) or not (false) a new encryption key pair for OpenMark Test Navigator for preview environment -->
	<property name="om-tn.encryption.use-gepeq-keypair" value="true"/> <!-- Boolean flag to use (true) or not (false) the OpenMark Authoring Tool key pair as the encryption key pair for OpenMark Test Navigator for preview environment -->
	<property name="om-tn.encryption.output" location="build/encryption/om-tn"/> <!-- Output directory for OpenMark Test Navigator for preview environment encryption -->
    <property name="om-tn.encryption.public-key" value=""/> <!-- Directory where public key (needed to encrypt) for OpenMark Navigator for preview environment is located -->
    <property name="om-tn.encryption.public-key.name" value="public.key"/> <!-- Public key for OpenMark Navigator for preview environment file name -->
    <property name="om-tn.encryption.private-key" value=""/> <!-- Directory where private key (needed to decrypt) for OpenMark Navigator for preview environment is located -->
    <property name="om-tn.encryption.private-key.name" value="private.key"/> <!-- Private key for OpenMark Navigator for preview environment file name -->
    <property name="om-tn.encryption.generate-password" value="false"/> <!-- Boolean flag to generate (true) or not (false) a new symmetric salted password for encryption of some web service operations arguments for OpenMark Test Navigator for preview environment -->
    <property name="om-tn.encryption.generate-password.done" value="false"/> <!-- Boolean flag indicate that generarion of a new symmetric salted password for encryption of some web service operations arguments for OpenMark Test Navigator for preview environment have been done (true) or not (false) -->
	<property name="om-tn.encryption.password" value=""/> <!-- Symmetric salted password to use for OpenMark Test Navigator for preview environment (if we don't generate a new one) -->
    <property name="om-tn-pro.encryption.enabled" value="false"/> <!-- Boolean flag to enable (true) or disable (false) encryption within OpenMark Test Navigator for publication environment configuration file -->
    <property name="om-tn-pro.encryption.generate-keypair" value="false"/> <!-- Boolean flag to generate (true) or not (false) a new encryption key pair for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.encryption.use-gepeq-keypair" value="true"/> <!-- Boolean flag to use (true) or not (false) the OpenMark Authoring Tool key pair as the encryption key pair for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.encryption.output" location="build/encryption/om-tn-pro"/> <!-- Output directory for OpenMark Test Navigator for publication environment encryption -->
    <property name="om-tn-pro.encryption.public-key" value=""/> <!-- Directory where public key (needed to encrypt) for OpenMark Navigator for publication environment is located -->
    <property name="om-tn-pro.encryption.public-key.name" value="public.key"/> <!-- Public key for OpenMark Navigator for publication environment file name -->
    <property name="om-tn-pro.encryption.private-key" value=""/> <!-- Directory where private key (needed to decrypt) for OpenMark Navigator for publication environment is located -->
    <property name="om-tn-pro.encryption.private-key.name" value="private.key"/> <!-- Private key for OpenMark Navigator for publication environment file name -->
    <property name="om-tn-pro.encryption.generate-password" value="false"/> <!-- Boolean flag to generate (true) or not (false) a new symmetric salted password for encryption of some web service operations arguments for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.encryption.generate-password.done" value="false"/> <!-- Boolean flag indicate that generarion of a new symmetric salted password for encryption of some web service operations arguments for OpenMark Test Navigator for publication environment have been done (true) or not (false) -->
    <property name="om-tn-pro.encryption.password" value=""/> <!-- Symmetric salted password to use for OpenMark Test Navigator for publication environment (if we don't generate a new one) -->
	
	<!-- Hibernate DB connection properties -->
    <property name="hibernate.connection.server" value="${gepeq.server}"/> <!-- DB server for Hibernate connection -->
    <property name="hibernate.connection.dbname" value="${gepeq.dbname}"/> <!-- DB name for Hibernate connection -->
    <property name="hibernate.connection.username" value="${gepeq.username}"/> <!-- DB username for Hibernate connection -->
    <property name="hibernate.connection.password" value="${gepeq.password}"/> <!-- DB password for Hibernate connection -->
	<property name="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/> <!-- Full class name for class that defines the Hibernate dialect to use -->
	<property name="hibernate.connection.driver_class" value="${generic.db.lib.classname}"/> <!-- Full class name for class driver to support DB access -->
    <property name="hibernate.connection.url" value="jdbc:postgresql://${hibernate.connection.server}:5432/${hibernate.connection.dbname}"/> <!-- Connection URL for DB access for Hibernate connection (derived from previous properties) -->
	
	<!-- Main OpenMark Authoring Tool library (once compiled) -->
	<property name="gepeq.lib.name" value="gepeq.jar"/> <!-- Main OpenMark Authoring Tool library file name -->
	<property name="gepeq.lib.classes.include" value="es/uned/lsi/gepec/"/> <!-- Path containing class files to include within Main OpenMark Authoring Tool library -->
	<property name="gepeq.lib.meta_inf.include" value="META-INF/"/> <!-- Path with META-INF folder to include within Main OpenMark Authoring Tool library -->
	
	<!-- Patched libraries -->
	<property name="jsf.lib.patched.name" value="javax.faces.2.0.8.patched.jar"/> <!-- JSF 2 patched library file name -->
	<property name="jsf.lib.patched.classes.include" value="com/sun/faces/facelets/component/*"/> <!-- Path containing class files to include within JSF 2 patched library -->
	<property name="primefaces.lib.patched.name" value="primefaces.patched.jar"/> <!-- Primefaces patched library file name -->
	<property name="primefaces.lib.patched.classes.include" value="org/primefaces/"/> <!-- Path containing class files to include within Primefaces patched library -->
	
	<!-- WEB-INF configuration -->
    <!-- configuration.xml -->
    <property name="configuration.web-inf.conf" value="conf/gepeq/WEB-INF"/> <!-- Directory where OpenMark Authoring Tool configuration template is located -->
    <property name="configuration.web-inf.conf.name" value="configuration.xml"/> <!-- OpenMark Authoring Tool configuration template file name -->
	<property name="gepeq.resources.folder" value="gepec_resources"/> <!-- OpenMark Authoring Tool resources folder name -->
	<property name="gepeq.resources.folder.src" value="gepec_resources"/> <!-- OpenMark Authoring Tool resources folder name for input web application -->
	<property name="gepeq.resources.keep-from.folder" value=""/> <!-- Directory with resources to copy to resources folder when deploying OpenMark Authoring Tool web application (GEPEQ) -->
	<property name="gepeq.om.url" value="${om.url}"/> <!-- OpenMark Developer URL (om) -->
	<property name="gepeq.om-tn.url" value="${om-tn.url}"/> <!-- OpenMark Test Navigator for preview environment URL (om-tn) -->
	<property name="gepeq.om-qe.url" value="${om-qe.url}"/> <!-- OpenMark Question Engine for preview environment URL (om-qe) -->
    <property name="gepeq.om-tn-pro.url" value="${om-tn-pro.url}"/> <!-- OpenMark Test Navigator for publication environment URL (om-tn-pro) -->
    <property name="gepeq.om-questions.folder" value="om_questions"/> <!-- OpenMark Authoring Tool questions folder name -->
	<property name="gepeq.om-questions.folder.src" value="om_questions"/> <!-- OpenMark Authoring Tool questions folder name for input web application -->
    <property name="gepeq.om-questions.keep-from.folder" value=""/> <!-- Directory with questions to copy to questions folder when deploying OpenMark Authoring Tool web application (GEPEQ) -->
    <property name="gepeq.import-questions.folder.src" value="imported_questions"/> <!-- OpenMark Authoring Tool imported questions folder name (not used) -->
    <property name="gepeq.import-questions.folder" value="imported_questions"/> <!-- OpenMark Authoring Tool imported questions folder name for input web application (not used) -->
    <property name="gepeq.import-questions.keep-from.folder" value=""/> <!-- Directory with imported questions to copy to imported questions folder when deploying OpenMark Authoring Tool web application (GEPEQ) (not used) -->
    <property name="gepeq.export-questions.folder.src" value="exported_questions"/>  <!-- OpenMark Authoring Tool exported questions folder name (not used) -->
	<property name="gepeq.export-questions.folder" value="exported_questions"/> <!-- OpenMark Authoring Tool exported questions folder name for input web application (not used) -->
    <property name="gepeq.export-questions.keep-from.folder" value=""/> <!-- Directory with exported questions to copy to exported questions folder when deploying OpenMark Authoring Tool web application (GEPEQ) (not used) -->
	<property name="gepeq.tmp.folder" value="tmp"/> <!-- OpenMark Authoring Tool temporary folder name used for previewing resources -->
    <property name="gepeq.tmp.folder.src" value="tmp"/> <!-- OpenMark Authoring Tool temporary folder name for input web application -->
    <property name="gepeq.proxy.url" value=""/> <!-- Proxy URL to use by OpenMark Authoring Tool web application (GEPEQ) -->
    <property name="gepeq.proxy.port" value=""/> <!-- Proxy port to use by OpenMark Authoring Tool web application (GEPEQ) -->
    <property name="gepeq.proxy.username" value=""/> <!-- Proxy username to use by OpenMark Authoring Tool web application (GEPEQ) -->
    <property name="gepeq.proxy.password" value=""/> <!-- Proxy password to use by OpenMark Authoring Tool web application (GEPEQ) -->
    <property name="gepeq.proxy.non-proxy-hosts" value="localhost"/> <!-- List of hosts not accessed via proxy (direct access) -->
    <!-- faces-config.xml -->
	<property name="faces-config.web-inf.conf" value="conf/gepeq/WEB-INF"/> <!-- Directory where OpenMark Authoring Tool faces-config template is located -->
    <property name="faces-config.web-inf.conf.name" value="faces-config.xml"/> <!-- OpenMark Authoring Tool faces-config template file name -->
	
	<!-- questiontypes.xml -->
	<property name="questiontypes.web-inf.conf" value="conf/gepeq/WEB-INF"/> <!-- Directory where OpenMark Authoring Tool questiontypes template (that defines supported question types) is located -->
    <property name="questiontypes.web-inf.conf.name" value="questiontypes.xml"/> <!-- OpenMark Authoring Tool questiontypes template file name -->
	
	<!-- themes.xml -->
    <property name="themes.web-inf.conf" value="conf/gepeq/WEB-INF"/> <!-- Directory where OpenMark Authoring Tool questiontypes template (that defines supported themes) is located -->
    <property name="themes.web-inf.conf.name" value="themes.xml"/> <!-- OpenMark Authoring Tool themes template file name -->
	
	<!-- web.xml -->
	<property name="web.web-inf.conf" value="conf/gepeq/WEB-INF"/> <!-- Directory where OpenMark Authoring Tool web.xml template is located -->
    <property name="web.web-inf.conf.name" value="web.xml"/> <!-- OpenMark Authoring Tool web.xml template file name -->
	<property name="javax.faces.FACELETS_REFRESH_PERIOD" value="1"/> <!-- Time in seconds that facelets should be checked for changes since last request. A value of -1 disables refresh checking. -->
    <property name="javax.faces.PROJECT_STAGE" value="Production"/> <!-- JSF Project Stage (can affect some JSF behaviours) -->
	<property name="primefaces.fileupload.thresholdsize" value="2097152"/> <!-- Configuration setting of Primefaces file uploading: Maximum file size in bytes to keep uploaded files in memory. If a file exceeds this limit, it'll be temporarily written to disk. -->
	
	<!-- META-INF configuration -->
    <!-- faces-config.xml -->
	<property name="faces-config.meta-inf.conf" value="conf/gepeq/META-INF"/> <!-- Directory where OpenMark Authoring Tool faces-config template for META-INF folder is located -->
    <property name="faces-config.meta-inf.conf.name" value="faces-config.xml"/> <!-- OpenMark Authoring Tool faces-config template file name for META-INF folder -->
    <property name="faces-config.meta-inf.dest" value="${build.classes}/META-INF"/> <!-- Directory where OpenMark Authoring Tool faces-config derived file for META-INF folder is stored -->
    <property name="faces-config.meta-inf.dest.name" value="faces-config.xml"/> <!-- OpenMark Authoring Tool faces-config derived file name for META-INF folder -->
	
	<!-- OpenMark libraries paths -->
    <property name="om.axis.lib" value="${axis.lib}"/> <!-- Directory where Apache Axis patched library for OpenMark is located -->
    <property name="om.axis.lib.name" value="${axis.lib.name}"/> <!-- Apache Axis patched library file name for OpenMark -->
	<property name="om.axis-ant.lib" value="libs/axis"/> <!-- Directory where Apache Axis Ant library for OpenMark is located -->
    <property name="om.axis-ant.lib.name" value="axis-ant.jar"/> <!-- Apache Axis Ant library file name for OpenMark -->
	<property name="om.jaf.lib" value="${jaf.lib}"/> <!-- Directory where JAF library for OpenMark is located -->
    <property name="om.jaf.lib.name" value="${jaf.lib.name}"/> <!-- JAF library file name for OpenMark -->
	<property name="om.apple-java-ext.lib" value="libs/apple-java-ext"/> <!-- Directory where Apple Java Extensions library for OpenMark is located -->
	<property name="om.apple-java-ext.lib.name" value="AppleJavaExtensions-1.2.jar"/> <!-- Apple Java Extensions library file name for OpenMark -->
    <property name="om.batik-anim.lib" value="libs/batik"/> <!-- Directory where Batik Anim library for OpenMark is located -->
    <property name="om.batik-anim.lib.name" value="batik-anim-1.7.jar"/> <!-- Batik Anim library file name for OpenMark -->
    <property name="om.batik-awt-util.lib" value="libs/batik"/> <!-- Directory where Batik AWT Util library for OpenMark is located -->
    <property name="om.batik-awt-util.lib.name" value="batik-awt-util-1.7.jar"/> <!-- Batik AWT Util library file name for OpenMark -->
    <property name="om.batik-css.lib" value="libs/batik"/> <!-- Directory where Batik CSS library for OpenMark is located -->
    <property name="om.batik-css.lib.name" value="batik-css-1.7.jar"/> <!-- Batik CSS library library file name for OpenMark -->
    <property name="om.batik-dom.lib" value="libs/batik"/> <!-- Directory where Batik DOM library for OpenMark is located -->
    <property name="om.batik-dom.lib.name" value="batik-dom-1.7.jar"/> <!-- Batik DOM library library file name for OpenMark -->
    <property name="om.batik-ext.lib" value="libs/batik"/> <!-- Directory where Batik Ext library for OpenMark is located -->
    <property name="om.batik-ext.lib.name" value="batik-ext-1.7.jar"/> <!-- Batik Ext library library file name for OpenMark -->
    <property name="om.batik-parser.lib" value="libs/batik"/> <!-- Directory where Batik Parser library for OpenMark is located -->
    <property name="om.batik-parser.lib.name" value="batik-parser-1.7.jar"/> <!-- Batik Parser library library file name for OpenMark -->
    <property name="om.batik-svg-dom.lib" value="libs/batik"/> <!-- Directory where Batik SVG-DOM library for OpenMark is located -->
    <property name="om.batik-svg-dom.lib.name" value="batik-svg-dom-1.7.jar"/> <!-- Batik SVG-DOM library library file name for OpenMark -->
    <property name="om.batik-util.lib" value="libs/batik"/> <!-- Directory where Batik Util library for OpenMark is located -->
    <property name="om.batik-util.lib.name" value="batik-util-1.7.jar"/> <!-- Batik Util library file name for OpenMark -->
    <property name="om.batik-xml.lib" value="libs/batik"/> <!-- Directory where Batik XML library for OpenMark is located -->
    <property name="om.batik-xml.lib.name" value="batik-xml-1.7.jar"/> <!-- Batik XML library file name for OpenMark -->
    <property name="om.commons-cli.lib" value="libs/apache-commons"/> <!-- Directory where Apache Commons Cli library for OpenMark is located -->
    <property name="om.commons-cli.lib.name" value="commons-cli-1.1.jar"/> <!-- Apache Commons Cli library file name for OpenMark -->
    <property name="om.commons-discovery.lib" value="${commons-discovery.lib}"/> <!-- Directory where Apache Commons Discovery library for OpenMark is located -->
    <property name="om.commons-discovery.lib.name" value="${commons-discovery.lib.name}"/> <!-- Apache Commons Discovery library file name for OpenMark -->
    <property name="om.commons-io.lib" value="libs/apache-commons"/> <!-- Directory where Apache Commons IO library for OpenMark is located -->
    <property name="om.commons-io.lib.name" value="commons-io-1.3.1.jar"/> <!-- Apache Commons IO library file name for OpenMark -->
    <property name="om.commons-lang.lib" value="${commons-lang.lib}"/> <!-- Directory where Apache Commons Lang library for OpenMark is located -->
    <property name="om.commons-lang.lib.name" value="${commons-lang.lib.name}"/> <!-- Apache Commons Lang library file name for OpenMark -->
    <property name="om.commons-logging.lib" value="${commons-logging.lib}"/> <!-- Directory where Apache Commons Logging library for OpenMark is located -->
    <property name="om.commons-logging.lib.name" value="${commons-logging.lib.name}"/> <!-- Apache Commons Logging library file name for OpenMark -->
    <property name="om.encryption.lib" value="${encryption.lib}"/> <!-- Directory where encryption library for OpenMark is located -->
    <property name="om.encryption.lib.name" value="${encryption.lib.name}"/> <!-- Encryption library file name for OpenMark -->
	<property name="om.jaxrpc.lib" value="${jaxrpc.lib}"/> <!-- Directory where JAXRPC library for OpenMark is located -->
	<property name="om.jaxrpc.lib.name" value="${jaxrpc.lib.name}"/> <!-- JAXRPC library file name for OpenMark -->
	<property name="om.jazzy.lib" value="libs/jazzy"/> <!-- Directory where Jazzy library for OpenMark is located -->
	<property name="om.jazzy.lib.name" value="jazzy-core.jar"/> <!-- Jazzy library file name for OpenMark -->
	<property name="om.jeuclid-cli.lib" value="libs/jeuclid"/> <!-- Directory where Jeuclid Cli library for OpenMark is located -->
    <property name="om.jeuclid-cli.lib.name" value="jeuclid-cli-3.1.5.jar"/> <!-- Jeuclid Cli library file name for OpenMark -->
    <property name="om.jeuclid-core.lib" value="libs/jeuclid"/> <!-- Directory where Jeuclid Core library for OpenMark is located -->
    <property name="om.jeuclid-core.lib.name" value="jeuclid-core-3.1.5.jar"/> <!-- Jeuclid Core library file name for OpenMark -->
    <property name="om.jeuclid-mathviewer.lib" value="libs/jeuclid"/> <!-- Directory where Jeuclid Mathviewer library for OpenMark is located -->
    <property name="om.jeuclid-mathviewer.lib.name" value="jeuclid-mathviewer-3.1.5.jar"/> <!-- Jeuclid Mathviewer library file name for OpenMark -->
    <property name="om.jeuclid-minimal.lib" value="libs/jeuclid"/> <!-- Directory where Jeuclid minimal library for OpenMark is located -->
    <property name="om.jeuclid-minimal.lib.name" value="jeuclid-minimal-3.1.5.jar"/> <!-- Jeuclid minimal library file name for OpenMark -->
	<property name="om.mail.lib" value="libs/mail"/> <!-- Directory where javamail library for OpenMark is located -->
    <property name="om.mail.lib.name" value="mail.jar"/> <!-- Javamail library file name for OpenMark -->
	<property name="om.saaj.lib" value="${saaj.lib}"/> <!-- Directory where SAAJ library for OpenMark is located -->
    <property name="om.saaj.lib.name" value="${saaj.lib.name}"/> <!-- SAAJ library file name for OpenMark -->
    <property name="om.wsdl4j.lib" value="${wsdl4j.lib}"/> <!-- Directory where WSDL4J library for OpenMark is located -->
    <property name="om.wsdl4j.lib.name" value="${wsdl4j.lib.name}"/> <!-- WSDL4J library file name for OpenMark -->
    <property name="om.xml-apis.lib" value="libs/xml-apis"/> <!-- Directory where Xml-Apis library for OpenMark is located -->
    <property name="om.xml-apis.lib.name" value="xml-apis-1.3.04.jar"/> <!-- Xml-Apis library file name for OpenMark -->
    <property name="om.xml-apis-ext.lib" value="libs/xml-apis"/> <!-- Directory where Xml-Apis-Ext library for OpenMark is located -->
    <property name="om.xml-apis-ext.lib.name" value="xml-apis-ext-1.3.04.jar"/> <!-- Xml-Apis-Ext library file name for OpenMark -->
    <property name="om.xmlgraphics.lib" value="libs/xmlgraphics"/> <!-- Directory where XML Graphics library for OpenMark is located -->
    <property name="om.xmlgraphics.lib.name" value="xmlgraphics-commons-1.3.1.jar"/> <!-- XML Graphics library file name for OpenMark -->
    <property name="om.log4j.lib" value="libs/log4j"/> <!-- Directory where LOG4J library for OpenMark is located -->
    <property name="om.log4j.lib.name" value="log4j-1.2.8.jar"/> <!-- LOG4J library file name for OpenMark -->
	
	<!-- OpenMark DB libraries -->
	<property name="om.postgres.db.lib" value="${postgres.db.lib}"/> <!-- Directory where PostgreSQL library is located for OpenMark -->
	<property name="om.postgres.db.lib.name" value="${postgres.db.lib.name}"/> <!-- PostgreSQL library file name for OpenMark -->
	
	<!-- OpenMark Generic DB library -->
	<property name="om.generic.db.lib" value="${om.postgres.db.lib}"/> <!-- Directory where DB library is located for OpenMark -->
    <property name="om.generic.db.lib.name" value="${om.postgres.db.lib.name}"/> <!-- DB library file name for OpenMark -->
	
    <!-- Main OpenMark libraries -->
	<property name="om.lib" value="libs/om"/> <!-- Directory where OpenMark Developer library is located -->
    <property name="om.lib.name" value="om-dev.jar"/> <!-- OpenMark Developer library file name -->
    <property name="om-qe.lib" value="libs/om"/> <!-- Directory where OpenMark Question Engine library for preview environment is located -->
    <property name="om-qe.lib.name" value="om-engine.jar"/> <!-- OpenMark Question Engine library for preview environment file name -->
    <property name="om-tn.lib" value="libs/om"/> <!-- Directory where OpenMark Test Navigator library for preview environment is located -->
    <property name="om-tn.lib.name" value="om-navigator.jar"/> <!-- OpenMark Test Navigator library for preview environment file name -->
    <property name="om-qe-pro.lib" value="libs/om"/> <!-- Directory where OpenMark Question Engine library for publication environment is located -->
    <property name="om-qe-pro.lib.name" value="om-engine.jar"/> <!-- OpenMark Question Engine library for publication environment file name -->
    <property name="om-tn-pro.lib" value="libs/om"/> <!-- Directory where OpenMark Test Navigator library for publication environment is located -->
    <property name="om-tn-pro.lib.name" value="om-navigator.jar"/> <!-- OpenMark Test Navigator library for publication environment file name -->
	
    <!-- OpenMark Developer WEB-INF configuration -->
    <!-- server-config.wsdd -->
    <property name="om.server-config.web-inf.conf" value="conf/om/WEB-INF"/> <!-- Directory where OpenMark Developer server-config.wsdd template is located -->
    <property name="om.server-config.web-inf.conf.name" value="server-config.wsdd"/> <!-- OpenMark Developer server-config.wsdd template file name -->
    <!-- web.xml -->
    <property name="om.web.web-inf.conf" value="conf/om/WEB-INF"/> <!-- Directory where OpenMark Developer web.xml template is located -->
    <property name="om.web.web-inf.conf.name" value="web.xml"/> <!-- OpenMark Developer web.xml template file name -->
	<property name="jdk-home" value=""/> <!-- Path to Java Development Kit installation -->
    <property name="ant-home" value=""/> <!-- Path to Ant installation -->
	<property name="om.devservlet" value="om.devservlet.uned.DevServlet"/> <!-- Full class name for OpenMark Development servlet-->
	<property name="om.questions.keep-from.folder" value=""/> <!-- Directory with questions to copy to questions folder when deploying OpenMark Developer web application (om) -->
	
	<!-- OpenMark Question Engine WEB-INF configuration (preview environment) -->
    <!-- qengine.sample.xml -->
	<property name="om-qe.qengine.sample.web-inf.name" value="qengine.sample.xml"/> <!-- OpenMark Question Engine for preview enviroment sample configuration file name (to discard it from being deployed) -->
	<!-- server-config.wsdd -->
    <property name="om-qe.server-config.web-inf.conf" value="conf/om-qe/WEB-INF"/> <!-- Directory where OpenMark Question Engine for preview enviroment server-config.wsdd template is located -->
    <property name="om-qe.server-config.web-inf.conf.name" value="server-config.wsdd"/> <!-- OpenMark Question Engine for preview enviroment server-config.wsdd template file name -->
	<property name="om-qe.om-service" value="om.qengine.uned.UnedOmService"/> <!-- Full class name for OpenMark Question Engine for preview enviroment Om service -->
    <!-- web.xml -->
    <property name="om-qe.web.web-inf.conf" value="conf/om-qe/WEB-INF"/> <!-- Directory where OpenMark Question Engine for preview enviroment web.xml template is located -->
    <property name="om-qe.web.web-inf.conf.name" value="web.xml"/> <!-- OpenMark Question Engine for preview enviroment web.xml template file name -->
	
    <!-- OpenMark Test Navigator configuration (preview environment) -->
    <!-- navigator.sample.xml -->
    <property name="om-tn.navigator.sample.name" value="navigator.sample.xml"/> <!-- OpenMark Test Navigator for preview enviroment sample configuration file name (to discard it from being deployed) -->
    <!-- navigator.xml -->
    <property name="om-tn.navigator.conf" value="conf/om-tn"/> <!-- Directory where OpenMark Test Navigator for preview enviroment configuration template is located -->
    <property name="om-tn.navigator.conf.name" value="navigator.xml"/> <!-- OpenMark Test Navigator for preview enviroment configuration template file name -->
	<property name="om-tn.navigator-db-plugin" value="om.tnavigator.db.postgres.uned.PostgreSQL"/> <!-- Full class name for Test Navigator DB access plugin for preview environment -->
	<property name="om-tn.trustedaddresses" value="127.0.0.1"/> <!-- List of IP addresses allowed to view server logs and status information for OpenMark Test Navigator web application for preview environment. Examples (you can have multiple addresses, too): 137.108.*.*,194.66.128-159.* -->
	<property name="om-tn.secureaddresses" value="127.0.0.1"/> <!-- List of IP addresses from which it is possible to run system reports for OpenMark Test Navigator web application for preview environment. Examples (you can have multiple addresses, too): 137.108.*.*,194.66.128-159.*  -->
	<property name="om-tn.navigator-auth-plugin" value="om.tnavigator.auth.uned.PreviewAuth"/> <!-- Full class name for OpenMark Question Engine for preview enviroment authentication plugin -->
	<property name="om-tn.questionengines" value="${om-qe.url}/services/Om"/> <!-- List of locations of question engine Om web services for preview environment -->
	<property name="om-tn.this-testnavigator" value="${om-tn.url}/"/> <!-- This OpenMark Test Navigator for preview environment URL (om-tn) -->
	<property name="om-tn.additional-testnavigators" value=""/> <!-- List of additional OpenMark Test Navigator for preview environment URLs -->
	<property name="om-tn.alertmail.from" value=""/> <!-- Sender email address for alert mails  for preview environment -->
    <property name="om-tn.alertmail.to" value=""/> <!-- List of recipient email addresses for alert mails for preview environment --> 
    <property name="om-tn.alertmail.cc" value=""/> <!-- List of carbon copy email addresses for alert mails for preview environment -->
    <property name="om-tn.gepeq.server" value="${gepeq.server}"/> <!-- OpenMark Authoring Tool DB server for OpenMark TestNavigator for preview environment configuration (needed a different property because encryption) -->
    <property name="om-tn.gepeq.dbname" value="${gepeq.dbname}"/> <!-- OpenMark Authoring Tool DB name for OpenMark TestNavigator for preview environment configuration (needed a different property because encryption) -->
    <property name="om-tn.gepeq.username" value="${gepeq.username}"/> <!-- OpenMark Authoring Tool DB username for OpenMark TestNavigator for preview environment configuration (needed a different property because encryption) -->
    <property name="om-tn.gepeq.password" value="${gepeq.password}"/> <!-- OpenMark Authoring Tool DB password for OpenMark TestNavigator for preview environment configuration (needed a different property because encryption) -->
	<property name="om-tn.auth-session-expiry" value=""/> <!-- User session duration for OpenMark Test Navigator for preview environment. Default duration if undefined it is 15 min. You can define duration in hours (eg. 2h), minutes (eg. 30m), seconds (eg. 45s) or even milliseconds (eg. 20000ms) -->
	<property name="om-tn.mail.config" value=""/> <!-- Mail configuration string for predefined configurations for OpenMark Test Navigator for preview environment. Currently only are supported predefined configurations for: Gmail, Yahoo! Mail, Hotmail -->
    <property name="om-tn.mail.username" value=""/> <!-- Username for mail authentication for OpenMark Test Navigator for preview environment -->
    <property name="om-tn.mail.password" value=""/> <!-- Password for mail authentication for OpenMark Test Navigator for preview environment -->
    <property name="om-tn.mail.hostname" value=""/> <!-- Mail server host name for OpenMark Test Navigator for preview environment -->
    <property name="om-tn.mail.port" value=""/> <!-- Mail server port for OpenMark Test Navigator for preview environment -->
    <property name="om-tn.mail.ssl" value=""/> <!-- Boolean flag to enable SSL (true) or not (false) for mail for OpenMark Test Navigator for preview environment -->
    <property name="om-tn.mail.start-tls" value=""/> <!-- Boolean flag to start TLS (true) or not (false) for mail for OpenMark Test Navigator for preview environment -->
    <property name="om-tn.mail.debug" value=""/> <!-- Boolean flag to enable (true) or disable (false) mail debug mode for OpenMark Test Navigator for preview environment -->
	<!-- questionbank samples -->
	<property name="om-tn.navigator.questionbank.jars" value="coordinates,dragmarkers,garden,households,scales,simulation"/> <!-- List of questions to be deployed as samples within questionbank folder for OpenMark Test Navigator for preview environment -->
	<property name="om-tn.navigator.questionbank.coordinates-jar.conf" value="conf/om-tn/questionbank"/> <!-- Directory where 'coordinates' question sample for OpenMark Test Navigator for preview environment is located -->
    <property name="om-tn.navigator.questionbank.coordinates-jar.conf.name" value="samples.uned.random.coordinates.1.0.jar"/> <!-- 'coordinates' question jar file name for OpenMark Test Navigator for preview environment -->
    <property name="om-tn.navigator.questionbank.dragmarkers-jar.conf" value="conf/om-tn/questionbank"/> <!-- Directory where 'dragmarkers' question sample for OpenMark Test Navigator for preview environment is located -->
    <property name="om-tn.navigator.questionbank.dragmarkers-jar.conf.name" value="samples.uned.random.dragmarkers.1.0.jar"/> <!-- 'dragmarkers' question jar file name for OpenMark Test Navigator for preview environment -->
    <property name="om-tn.navigator.questionbank.garden-jar.conf" value="conf/om-tn/questionbank"/> <!-- Directory where 'garden' question sample for OpenMark Test Navigator for preview environment is located -->
    <property name="om-tn.navigator.questionbank.garden-jar.conf.name" value="samples.uned.random.garden.1.0.jar"/> <!-- 'garden' question jar file name for OpenMark Test Navigator for preview environment -->
    <property name="om-tn.navigator.questionbank.households-jar.conf" value="conf/om-tn/questionbank"/> <!-- Directory where 'households' question sample for OpenMark Test Navigator for preview environment is located -->
    <property name="om-tn.navigator.questionbank.households-jar.conf.name" value="samples.uned.random.households.1.0.jar"/> <!-- 'households' question jar file name for OpenMark Test Navigator for preview environment -->
    <property name="om-tn.navigator.questionbank.scales-jar.conf" value="conf/om-tn/questionbank"/> <!-- Directory where 'scales' question sample for OpenMark Test Navigator for preview environment is located -->
    <property name="om-tn.navigator.questionbank.scales-jar.conf.name" value="samples.uned.random.scales.1.0.jar"/> <!-- 'scales' question jar file name for OpenMark Test Navigator for preview environment -->
    <property name="om-tn.navigator.questionbank.simulation-jar.conf" value="conf/om-tn/questionbank"/> <!-- Directory where 'simulation' question sample for OpenMark Test Navigator for preview environment is located -->
    <property name="om-tn.navigator.questionbank.simulation-jar.conf.name" value="samples.uned.random.scales.1.0.jar"/> <!-- 'simulation' question jar file name for OpenMark Test Navigator for preview environment -->
	<!-- testbank samples -->
    <property name="om-tn.navigator.testbank.questions" value="simulation"/> <!-- List of questions to be deployed as samples within testbank folder for OpenMark Test Navigator for preview environment -->
    <property name="om-tn.navigator.testbank.simulation-question.deploy.conf" value="conf/om-tn/testbank"/> <!-- Directory where 'simulation' question sample deploy file for OpenMark Test Navigator for preview environment is located -->
    <property name="om-tn.navigator.testbank.simulation-question.deploy.conf.name" value="samples.uned.simulation.deploy.xml"/> <!-- 'simulation' question sample deploy file name for OpenMark Test Navigator for preview environment -->
    <property name="om-tn.navigator.testbank.tests" value="uned-module5"/> <!-- List of tests to be deployed as samples within testbank folder for OpenMark Test Navigator for preview environment -->
    <property name="om-tn.navigator.testbank.uned-module5-test.test.conf" value="conf/om-tn/testbank"/> <!-- Directory where 'uned-module5' test sample test file for OpenMark Test Navigator for preview environment is located -->
	<property name="om-tn.navigator.testbank.uned-module5-test.test.conf.name" value="uned.module5.test.xml"/>  <!-- 'uned-module5' test sample test file name for OpenMark Test Navigator for preview environment -->
    <property name="om-tn.navigator.testbank.uned-module5-test.deploy.conf" value="conf/om-tn/testbank"/> <!-- Directory where 'uned-module5' test sample deploy file for OpenMark Test Navigator for preview environment is located -->
    <property name="om-tn.navigator.testbank.uned-module5-test.deploy.conf.name" value="uned.module5.deploy.xml"/> <!-- 'uned-module5' test sample deploy file name for OpenMark Test Navigator for preview environment -->
    <!-- WEB-INF configuration -->
    <!-- server-config.wsdd -->
    <property name="om-tn.server-config.web-inf.conf" value="conf/om-tn/WEB-INF"/>  <!-- Directory where OpenMark Test Navigator for preview enviroment server-config.wsdd template is located -->
    <property name="om-tn.server-config.web-inf.conf.name" value="server-config.wsdd"/> <!-- OpenMark Test Navigator for preview enviroment server-config.wsdd template file name -->
    <!-- web.xml -->
    <property name="om-tn.web.web-inf.conf" value="conf/om-tn/WEB-INF"/> <!-- Directory where OpenMark Test Navigator for preview enviroment web.xml template is located -->
    <property name="om-tn.web.web-inf.conf.name" value="web.xml"/> <!-- OpenMark Test Navigator for preview enviroment web.xml template file name -->
    <property name="om-tn.navigator-servlet" value="om.tnavigator.uned.PreviewNavigatorServlet"/> <!-- Full class name for OpenMark Test Navigator for preview environment servlet -->
	<!-- questionbank -->
	<property name="om-tn.questionbank.gepeq-keep-from.folder" value=""/> <!-- Directory with questions jars generated with OpenMark Authoring Tool to copy to questionbank folder when deploying OpenMark Test Navigator web application for preview environment (om-tn) -->
    <!-- testbank -->
    <property name="om-tn.testbank.gepeq-keep-from.folder" value=""/> <!-- Directory with questions/tests deploy/test xml files generated with OpenMark Authoring Tool to copy to testbank folder when deploying OpenMark Test Navigator web application for preview environment (om-tn) -->
	<!-- logs -->
	<property name="om-tn.logs.keep-from.folder" value=""/> <!-- Directory with logs to copy to logs folder when deploying OpenMark Test Navigator web application for preview environment (om-tn) -->
	
    <!-- OpenMark Question Engine WEB-INF configuration (publication environment) -->
    <!-- qengine.sample.xml -->
    <property name="om-qe-pro.qengine.sample.web-inf.name" value="qengine.sample.xml"/> <!-- OpenMark Question Engine for publication enviroment sample configuration file name (to discard it from being deployed) -->
    <!-- server-config.wsdd -->
    <property name="om-qe-pro.server-config.web-inf.conf" value="conf/om-qe-pro/WEB-INF"/> <!-- Directory where OpenMark Question Engine for publication enviroment server-config.wsdd template is located -->
    <property name="om-qe-pro.server-config.web-inf.conf.name" value="server-config.wsdd"/> <!-- OpenMark Question Engine for publication enviroment server-config.wsdd template file name -->
    <property name="om-qe-pro.om-service" value="om.qengine.uned.UnedOmService"/> <!-- Full class name for OpenMark Question Engine for publication enviroment Om service -->
    <!-- web.xml -->
    <property name="om-qe-pro.web.web-inf.conf" value="conf/om-qe-pro/WEB-INF"/> <!-- Directory where OpenMark Question Engine for publication enviroment web.xml template is located -->
    <property name="om-qe-pro.web.web-inf.conf.name" value="web.xml"/> <!-- OpenMark Question Engine for publication enviroment web.xml template file name -->
	
    <!-- OpenMark Test Navigator configuration (publication environment) -->
    <!-- navigator.sample.xml -->
    <property name="om-tn-pro.navigator.sample.name" value="navigator.sample.xml"/> <!-- OpenMark Test Navigator for publication enviroment sample configuration file name (to discard it from being deployed) -->
    <!-- navigator.xml -->
    <property name="om-tn-pro.navigator.conf" value="conf/om-tn-pro"/> <!-- Directory where OpenMark Test Navigator for publication enviroment configuration template is located -->
    <property name="om-tn-pro.navigator.conf.name" value="navigator.xml"/> <!-- OpenMark Test Navigator for publication enviroment configuration template file name -->
    <property name="om-tn-pro.navigator-db-plugin" value="om.tnavigator.db.postgres.uned.PostgreSQL"/> <!-- Full class name for Test Navigator for publication environment DB access plugin -->
    <property name="om-tn-pro.trustedaddresses" value="127.0.0.1"/> <!-- List of IP addresses allowed to view server logs and status information for OpenMark Test Navigar web application for publication environment. Examples (you can have multiple addresses, too): 137.108.*.*,194.66.128-159.* -->
    <property name="om-tn-pro.secureaddresses" value="127.0.0.1"/> <!-- List of IP addresses from which it is possible to run system reports for OpenMark Test Navigar web application for publication environment. Examples (you can have multiple addresses, too): 137.108.*.*,194.66.128-159.*  -->
    <property name="om-tn-pro.navigator-auth-plugin" value="om.tnavigator.auth.uned.GepeqAuth"/> <!-- Full class name for OpenMark Question Engine for publication enviroment authentication plugin -->
    <property name="om-tn-pro.questionengines" value="${om-qe-pro.url}/services/Om"/> <!-- List of locations of question engine web Om services for publication environment -->
    <property name="om-tn-pro.this-testnavigator" value="${om-tn-pro.url}/"/> <!-- This OpenMark Test Navigator for publication environment URL (om-tn-pro) -->
    <property name="om-tn-pro.additional-testnavigators" value=""/> <!-- List of additional OpenMark Test Navigator for publication environment URLs (om-tn-pro) -->
    <property name="om-tn-pro.alertmail.from" value=""/> <!-- Sender email address for alert mails for publication environment -->
    <property name="om-tn-pro.alertmail.to" value=""/> <!-- List of recipient email addresses for alert mails for publication environment --> 
    <property name="om-tn-pro.alertmail.cc" value=""/> <!-- List of carbon copy email addresses for alert mails for publication environment -->
    <property name="om-tn-pro.gepeq.server" value="${gepeq.server}"/> <!-- OpenMark Authoring Tool DB server for OpenMark TestNavigator for publication environment configuration (needed a different property because encryption) -->
    <property name="om-tn-pro.gepeq.dbname" value="${gepeq.dbname}"/> <!-- OpenMark Authoring Tool DB name for OpenMark TestNavigator for publication environment configuration (needed a different property because encryption) -->
    <property name="om-tn-pro.gepeq.username" value="${gepeq.username}"/> <!-- OpenMark Authoring Tool DB username for OpenMark TestNavigator for publication environment configuration (needed a different property because encryption) -->
    <property name="om-tn-pro.gepeq.password" value="${gepeq.password}"/> <!-- OpenMark Authoring Tool DB password for OpenMark TestNavigator for publication environment configuration (needed a different property because encryption) -->
    <property name="om-tn-pro.auth-session-expiry" value=""/> <!-- User session duration for OpenMark Test Navigator for publication environment. Default duration if undefined it is 15 min. You can define duration in hours (eg. 2h), minutes (eg. 30m), seconds (eg. 45s) or even milliseconds (eg. 20000ms) -->
    <property name="om-tn-pro.mail.config" value=""/> <!-- Mail configuration string for predefined configurations for OpenMark Test Navigator for publication environment. Currently only are supported predefined configurations for: Gmail, Yahoo! Mail, Hotmail -->
    <property name="om-tn-pro.mail.username" value=""/> <!-- Username for mail authentication for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.mail.password" value=""/> <!-- Password for mail authentication for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.mail.hostname" value=""/> <!-- Mail server host name for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.mail.port" value=""/> <!-- Mail server port for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.mail.ssl" value=""/> <!-- Boolean flag to enable SSL (true) or not (false) for mail for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.mail.start-tls" value=""/> <!-- Boolean flag to start TLS (true) or not (false) for mail for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.mail.debug" value=""/> <!-- Boolean flag to enable (true) or disable (false) mail debug mode for OpenMark Test Navigator for publication environment -->
    <!-- questionbank samples -->
    <property name="om-tn-pro.navigator.questionbank.jars" value="coordinates,dragmarkers,garden,households,scales,simulation"/> <!-- List of questions to be deployed as samples within questionbank folder for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.navigator.questionbank.coordinates-jar.conf" value="${om-tn.navigator.questionbank.coordinates-jar.conf}"/> <!-- Directory where 'coordinates' question sample for OpenMark Test Navigator for publication environment is located -->
    <property name="om-tn-pro.navigator.questionbank.coordinates-jar.conf.name" value="${om-tn.navigator.questionbank.coordinates-jar.conf.name}"/> <!-- 'coordinates' question jar file name for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.navigator.questionbank.dragmarkers-jar.conf" value="${om-tn.navigator.questionbank.dragmarkers-jar.conf}"/> <!-- Directory where 'dragmarkers' question sample for OpenMark Test Navigator for publication environment is located -->
    <property name="om-tn-pro.navigator.questionbank.dragmarkers-jar.conf.name" value="${om-tn.navigator.questionbank.dragmarkers-jar.conf.name}"/> <!-- 'dragmarkers' question jar file name for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.navigator.questionbank.garden-jar.conf" value="${om-tn.navigator.questionbank.garden-jar.conf}"/> <!-- Directory where 'garden' question sample for OpenMark Test Navigator for publication environment is located -->
    <property name="om-tn-pro.navigator.questionbank.garden-jar.conf.name" value="${om-tn.navigator.questionbank.garden-jar.conf.name}"/> <!-- 'garden' question jar file name for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.navigator.questionbank.households-jar.conf" value="${om-tn.navigator.questionbank.households-jar.conf}"/> <!-- Directory where 'households' question sample for OpenMark Test Navigator for publication environment is located -->
    <property name="om-tn-pro.navigator.questionbank.households-jar.conf.name" value="${om-tn.navigator.questionbank.households-jar.conf.name}"/> <!-- 'households' question jar file name for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.navigator.questionbank.scales-jar.conf" value="${om-tn.navigator.questionbank.scales-jar.conf}"/> <!-- Directory where 'scales' question sample for OpenMark Test Navigator for publication environment is located -->
    <property name="om-tn-pro.navigator.questionbank.scales-jar.conf.name" value="${om-tn.navigator.questionbank.scales-jar.conf.name}"/> <!-- 'scales' question jar file name for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.navigator.questionbank.simulation-jar.conf" value="${om-tn.navigator.questionbank.simulation-jar.conf}"/> <!-- Directory where 'simulation' question sample for OpenMark Test Navigator for publication environment is located -->
    <property name="om-tn-pro.navigator.questionbank.simulation-jar.conf.name" value="${om-tn.navigator.questionbank.simulation-jar.conf.name}"/> <!-- 'simulation' question jar file name for OpenMark Test Navigator for publication environment -->
    <!-- testbank samples -->
    <property name="om-tn-pro.navigator.testbank.questions" value="simulation"/> <!-- List of questions to be deployed as samples within testbank folder for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.navigator.testbank.simulation-question.deploy.conf" value="${om-tn.navigator.testbank.simulation-question.deploy.conf}"/> <!-- Directory where 'simulation' question sample deploy file for OpenMark Test Navigator for publication environment is located -->
    <property name="om-tn-pro.navigator.testbank.simulation-question.deploy.conf.name" value="${om-tn.navigator.testbank.simulation-question.deploy.conf.name}"/> <!-- 'simulation' question sample deploy file name for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.navigator.testbank.tests" value="uned-module5"/> <!-- List of tests to be deployed as samples within testbank folder for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.navigator.testbank.uned-module5-test.test.conf" value="${om-tn.navigator.testbank.uned-module5-test.test.conf}"/> <!-- Directory where 'uned-module5' test sample test file for OpenMark Test Navigator for publication environment is located -->
    <property name="om-tn-pro.navigator.testbank.uned-module5-test.test.conf.name" value="${om-tn.navigator.testbank.uned-module5-test.test.conf.name}"/>  <!-- 'uned-module5' test sample test file name for OpenMark Test Navigator for publication environment -->
    <property name="om-tn-pro.navigator.testbank.uned-module5-test.deploy.conf" value="${om-tn.navigator.testbank.uned-module5-test.deploy.conf}"/> <!-- Directory where 'uned-module5' test sample deploy file for OpenMark Test Navigator for publication environment is located -->
    <property name="om-tn-pro.navigator.testbank.uned-module5-test.deploy.conf.name" value="${om-tn.navigator.testbank.uned-module5-test.deploy.conf.name}"/> <!-- 'uned-module5' test sample deploy file name for OpenMark Test Navigator for publication environment -->
    <!-- WEB-INF configuration -->
    <!-- server-config.wsdd -->
    <property name="om-tn-pro.server-config.web-inf.conf" value="conf/om-tn-pro/WEB-INF"/>  <!-- Directory where OpenMark Test Navigator for publication enviroment server-config.wsdd template is located -->
    <property name="om-tn-pro.server-config.web-inf.conf.name" value="server-config.wsdd"/> <!-- OpenMark Test Navigator for preview publication server-config.wsdd template file name -->
    <!-- web.xml -->
    <property name="om-tn-pro.web.web-inf.conf" value="conf/om-tn-pro/WEB-INF"/> <!-- Directory where OpenMark Test Navigator for publication enviroment web.xml template is located -->
    <property name="om-tn-pro.web.web-inf.conf.name" value="web.xml"/> <!-- OpenMark Test Navigator for publication enviroment web.xml template file name -->
    <property name="om-tn-pro.navigator-servlet" value="om.tnavigator.uned.LogoutNavigatorServlet"/> <!-- Full class name for OpenMark Test Navigator for publication environment servlet -->
    <!-- questionbank -->
    <property name="om-tn-pro.questionbank.gepeq-keep-from.folder" value=""/> <!-- Directory with questions jars generated with OpenMark Authoring Tool to copy to questionbank folder when deploying OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
    <!-- testbank -->
    <property name="om-tn-pro.testbank.gepeq-keep-from.folder" value=""/> <!-- Directory with questions/tests deploy/test xml files generated with OpenMark Authoring Tool to copy to testbank folder when deploying OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
    <!-- logs -->
    <property name="om-tn-pro.logs.keep-from.folder" value=""/> <!-- Directory with logs to copy to logs folder when deploying OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
	
	<!-- Classpaths -->
	<path id="servlet-api.classpath"> <!-- Classpath for servlet-api library -->
		 <pathelement location="${servlet-api.lib}/${servlet-api.lib.name}"/>
	</path>
	
	<path id="jaf.classpath"> <!-- Classpath for JAF library -->
		<pathelement location="${jaf.lib}/${jaf.lib.name}" />
	</path>
	
	<path id="el22.classpath"> <!-- Classpath for EL 2.2 libraries -->
		<pathelement location="${el22-api.lib}/${el22-api.lib.name}" />
		<pathelement location="${el22-imp.lib}/${el22-imp.lib.name}" />
	</path>
	
	<path id="javamail.classpath"> <!-- Classpath for Javamail libraries -->
		<pathelement location="${javamail.lib}/${javamail.lib.name}"/>
	</path>
	
	<path id="jsf.classpath"> <!-- Classpath for JSF library -->
		<pathelement location="${jsf.lib}/${jsf.lib.name}"/>
	</path>
	
	<path id="hibernate.classpath"> <!-- Classpath for Hibernate libraries -->
        <pathelement location="${hibernate.lib}/${hibernate.lib.name}"/>
		<pathelement location="${hibernate-jpa.lib}/${hibernate-jpa.lib.name}"/>
	</path>
	
	<path id="encryption.classpath"> <!-- Classpath for encryption library -->
		<pathelement location="${encryption.lib}/${encryption.lib.name}"/>
	</path>
	
	<path id="primefaces.classpath"> <!-- Classpath for Primefaces library -->
		<pathelement location="${primefaces.lib}/${primefaces.lib.name}"/>
	</path>
	
	<path id="commons.classpath"> <!--Classpath for Apache Commons libraries -->
        <pathelement location="${commons-io.lib}/${commons-io.lib.name}"/>
		<pathelement location="${commons-lang.lib}/${commons-lang.lib.name}"/>
	</path>
	
	<path id="axis.classpath"> <!-- Classpath for Apache Axis library -->
		<pathelement location="${axis.lib}/${axis.lib.name}"/>
	</path>
	
	<path id="jaxrpc.classpath"> <!-- Classpath for JAXRPC library -->
		<pathelement location="${jaxrpc.lib}/${jaxrpc.lib.name}"/>
	</path>
	
	<path id="jtidy.classpath"> <!-- Classpath for JTidy library -->
		<pathelement location="${jtidy.lib}/${jtidy.lib.name}"/>
	</path>
	
    <path id="gepeq.classpath"> <!-- Classpath for OpenMark Authoring Tool libraries (GEPEQ)-->
        <pathelement location="build/classes"/>
    	<path refid="servlet-api.classpath"/>
    	<path refid="jaf.classpath"/>
    	<path refid="el22.classpath"/>
        <path refid="javamail.classpath"/>
    	<path refid="jsf.classpath"/>
    	<path refid="hibernate.classpath"/>
    	<path refid="encryption.classpath"/>
    	<path refid="primefaces.classpath"/>
    	<path refid="commons.classpath"/>
    	<path refid="axis.classpath"/>
    	<path refid="jaxrpc.classpath"/>
    	<path refid="jtidy.classpath"/>
    </path>
	
    <target description="Performs encryption needed before building and deploying OpenMark Authoring Tool web application (GEPEQ)" depends="save-keep" name="gepeq-encryption">
        <if>
            <equals arg1="${gepeq.encryption.enabled}" arg2="true"/> <!-- Check that GEPEQ encryption is enabled -->
            <then>
                <if>
                    <not>
                        <available file="${gepeq.encryption.output}" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${gepeq.encryption.output}"/> <!-- Create GEPEQ encryption output folder if needed -->
                    </then>
                </if>
                <if>
                    <equals arg1="${gepeq.encryption.generate-keypair}" arg2="true"/> <!-- Check if we need to generate a new encryption key pair for GEPEQ -->
                    <then>
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                          <arg value="savekeypair_enc_priv:${gepeq.encryption.output}"/>
                        </java>
                    	<!-- We assign public and private key properties for GEPEQ to reference the generated key pair -->
                        <propertycopy name="gepeq.encryption.public-key" from="gepeq.encryption.output" override="true"/>
                        <property name="gepeq.encryption.public-key.name.constant" value="public.key"/>
                        <propertycopy name="gepeq.encryption.public-key.name" from="gepeq.encryption.public-key.name.constant" override="true"/>
                        <propertycopy name="gepeq.encryption.private-key" from="gepeq.encryption.output" override="true"/>
                        <property name="gepeq.encryption.private-key.name.constant" value="private.key"/>
                        <propertycopy name="gepeq.encryption.private-key.name" from="gepeq.encryption.private-key.name.constant" override="true"/>
                    </then>
                </if>
                <if>
                    <available file="${gepeq.encryption.public-key}/${gepeq.encryption.public-key.name}"/> <!-- Check that public key file exist -->
                    <then>
                        <if>
                            <equals arg1="${hibernate.encryption}" arg2="true"/> <!-- Check that Hibernate encryption is enabled -->
                            <then>
                            	<!-- Encrypt Hibernate dialect -->
                                <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                                    <arg value="encrypt:${gepeq.encryption.public-key}"/>
                                    <arg value="${hibernate.dialect}"/>
                                    <arg value="-o"/>
                                    <arg value="hibernate.dialect.txt"/>
                                </java>
                                <loadfile property="hibernate.dialect.encrypted" srcfile="${gepeq.encryption.public-key}/hibernate.dialect.txt">
                                    <filterchain>
                                        <deletecharacters chars="\r\n"/>
                                    </filterchain>
                                </loadfile>
                                <propertycopy name="hibernate.dialect" from="hibernate.dialect.encrypted" override="true"/>
                                <!-- Encrypt Hibernate connection driver class -->
                                <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                                    <arg value="encrypt:${gepeq.encryption.public-key}"/>
                                    <arg value="${hibernate.connection.driver_class}"/>
                                    <arg value="-o"/>
                                    <arg value="hibernate.connection.driver_class.txt"/>
                                </java>
                                <loadfile property="hibernate.connection.driver_class.encrypted" srcfile="${gepeq.encryption.public-key}/hibernate.connection.driver_class.txt">
                                    <filterchain>
                                        <deletecharacters chars="\r\n"/>
                                    </filterchain>
                                </loadfile>
                                <propertycopy name="hibernate.connection.driver_class" from="hibernate.connection.driver_class.encrypted" override="true"/>
                                <!-- Encrypt Hibernate connection URL -->
                                <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                                    <arg value="encrypt:${gepeq.encryption.public-key}"/>
                                    <arg value="${hibernate.connection.url}"/>
                                    <arg value="-o"/>
                                    <arg value="hibernate.connection.url.txt"/>
                                </java>
                                <loadfile property="hibernate.connection.url.encrypted" srcfile="${gepeq.encryption.public-key}/hibernate.connection.url.txt">
                                    <filterchain>
                                        <deletecharacters chars="\r\n"/>
                                    </filterchain>
                                </loadfile>
                                <propertycopy name="hibernate.connection.url" from="hibernate.connection.url.encrypted" override="true"/>
                            	<!-- Encrypt Hibernate connection username -->
                                <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                                    <arg value="encrypt:${gepeq.encryption.public-key}"/>
                                    <arg value="${hibernate.connection.username}"/>
                                    <arg value="-o"/>
                                    <arg value="hibernate.connection.username.txt"/>
                                </java>
                                <loadfile property="hibernate.connection.username.encrypted" srcfile="${gepeq.encryption.private-key}/hibernate.connection.username.txt">
                                    <filterchain>
                                        <deletecharacters chars="\r\n"/>
                                    </filterchain>
                                </loadfile>
                                <propertycopy name="hibernate.connection.username" from="hibernate.connection.username.encrypted" override="true"/>
                                <!-- Encrypt Hibernate connection password -->
                                <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                                    <arg value="encrypt:${gepeq.encryption.public-key}"/>
                                    <arg value="${hibernate.connection.password}"/>
                                    <arg value="-o"/>
                                    <arg value="hibernate.connection.password.txt"/>
                                </java>
                                <loadfile property="hibernate.connection.password.encrypted" srcfile="${gepeq.encryption.public-key}/hibernate.connection.password.txt">
                                    <filterchain>
                                        <deletecharacters chars="\r\n"/>
                                    </filterchain>
                                </loadfile>
                                <propertycopy name="hibernate.connection.password" from="hibernate.connection.password.encrypted" override="true"/>
                            </then>
                        </if>
                    	<!-- Encrypt Proxy Password -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${gepeq.encryption.public-key}"/>
                            <arg value="${gepeq.proxy.password}"/>
                            <arg value="-o"/>
                            <arg value="gepeq.proxy.password.txt"/>
                        </java>
                        <loadfile property="gepeq.proxy.password.encrypted" srcfile="${gepeq.encryption.public-key}/gepeq.proxy.password.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="gepeq.proxy.password" from="gepeq.proxy.password.encrypted" override="true"/>
                    </then>
                    <else>
                    	<property name="gepeq.encryption.false.constant" value="false"/>
                        <propertycopy name="gepeq.encryption.enabled" from="gepeq.encryption.false.constant" override="true"/>
                        <echo>Encryption for OpenMark Authoring Tool (GEPEQ) it is not possible so it has been disabled...</echo>
                    </else>
                </if>
            </then>
        </if>
    	<if>
    		<and> <!-- Check if we need to generate a new salted password for OpenMark Test Navigator for preview enviroment -->
    			<equals arg1="${om-tn.encryption.generate-password}" arg2="true"/>
    			<not>
    				<equals arg1="${om-tn.encryption.generate-password.done}" arg2="true"/>
    			</not>
    		</and>
    		<then>
    			<if>
    				<not>
    				    <available file="${om-tn.encryption.output}" type="dir"/>
    				</not>
    				<then>
    					<mkdir dir="${om-tn.encryption.output}"/> <!-- Creates the encryption output folder for OpenMark Test Navigator for preview enviroment if needed -->
    				</then>
    			</if>
    			<!-- Generates a new symmetric salted password for OpenMark Test Navigator for preview enviroment -->
                <java jar="${encryption.symmetric-encryptor.tool}/${encryption.symmetric-encryptor.tool.name}" fork="true">
                    <arg value="generate-salted-password"/>
                    <arg value="-o"/>
                	<arg value="${om-tn.encryption.output}/om-tn.encryption.password.txt"/>
                </java>
    			<loadfile property="om-tn.encryption.password.generated" srcfile="${om-tn.encryption.output}/om-tn.encryption.password.txt">
    				<filterchain>
    					<deletecharacters chars="\r\n"/>
    				</filterchain>
    			</loadfile>
                <propertycopy name="om-tn.encryption.password" from="om-tn.encryption.password.generated" override="true"/>
                <property name="gepeq.om-tn.encryption.generate-password.done.constant" value="true"/>
                <propertycopy name="om-tn.encryption.generate-password.done" from="gepeq.om-tn.encryption.generate-password.done.constant" override="true"/>
    		</then>
    	</if>
        <if>
            <and> <!-- Check if we need to generate a new salted password for OpenMark Test Navigator for publication enviroment -->
                <equals arg1="${om-tn-pro.encryption.generate-password}" arg2="true"/>
                <not>
                    <equals arg1="${om-tn-pro.encryption.generate-password.done}" arg2="true"/>
                </not>
            </and>
            <then>
                <if>
                    <not>
                        <available file="${om-tn-pro.encryption.output}" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-tn-pro.encryption.output}"/> <!-- Creates the encryption output folder for OpenMark Test Navigator for publication enviroment if needed -->
                    </then>
                </if>
            	<!-- Generates a new symmetric salted password for OpenMark Test Navigator for publication enviroment -->
                <java jar="${encryption.symmetric-encryptor.tool}/${encryption.symmetric-encryptor.tool.name}" fork="true">
                    <arg value="generate-salted-password"/>
                    <arg value="-o"/>
                    <arg value="${om-tn-pro.encryption.output}/om-tn-pro.encryption.password.txt"/>
                </java>
                <loadfile property="om-tn-pro.encryption.password.generated" srcfile="${om-tn-pro.encryption.output}/om-tn-pro.encryption.password.txt">
                    <filterchain>
                        <deletecharacters chars="\r\n"/>
                    </filterchain>
                </loadfile>
                <propertycopy name="om-tn-pro.encryption.password" from="om-tn-pro.encryption.password.generated" override="true"/>
                <property name="gepeq.om-tn-pro.encryption.generate-password.done.constant" value="true"/>
            	<propertycopy name="om-tn-pro.encryption.generate-password.done" from="gepeq.om-tn-pro.encryption.generate-password.done.constant" override="true"/>
            </then>
        </if>
    </target>
	
    <target description="Performs some initializations needed before building and deploying OpenMark Authoring Tool web application (GEPEQ)" name="init" depends="gepeq-encryption">
        <if>
            <not>
                <available file="${build.classes}" type="dir"/>
            </not>
            <then>
                <mkdir dir="${build.classes}"/> <!-- Creates output folder for compiled classes if needed -->
            </then>
        </if>
        <copy includeemptydirs="false" todir="${build.classes}"> <!-- Copy resource files within src folder to output folder for compiled classes (exclude .java, .launch and the hibernate configuration file) -->
            <fileset dir="${src}">
            	<exclude name="${hibernate.conf.src.name}"/>
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    	<if>
    		<equals arg1="${hibernate.encryption}" arg2="true"/> <!-- Check if we need to enable encryption for Hibernate configuration file -->
    		<then>
    			<!-- If hibernate encryption is enabled we need to include an Hibernate connection provider class within Hibernate configuration file to support decryption of encrypted properties -->
    			<property name="hibernate.encryption.config" value="${line.separator}  &lt;property name=&quot;connection.provider_class&quot;&gt;${hibernate.connection.provider.class}&lt;/property&gt;"/>
    		</then>
    		<else>
    			<property name="hibernate.encryption.config" value=""/>
    		</else>
    	</if>
    	<!-- Generates a new Hibernate configuration file from template replacing some values with the appropiated values and copy it to output folder for compiled classes -->
    	<copy file="${hibernate.conf}/${hibernate.conf.name}" tofile="${hibernate.conf.dest}/${hibernate.conf.dest.name}">
    		<filterchain>
    			<replacetokens>
    				<token key="hibernate.encryption.config" value="${hibernate.encryption.config}"/>
    				<token key="hibernate.dialect" value="${hibernate.dialect}"/>
    				<token key="hibernate.connection.driver_class" value="${hibernate.connection.driver_class}"/>
                    <token key="hibernate.connection.url" value="${hibernate.connection.url}"/>
    				<token key="hibernate.connection.username" value="${hibernate.connection.username}"/>
    				<token key="hibernate.connection.password" value="${hibernate.connection.password}"/>
    			</replacetokens>
    		</filterchain>
    	</copy>
        <if>
            <not>
                <available file="${faces-config.meta-inf.dest}" type="dir"/>
            </not>
            <then>
                <mkdir dir="${faces-config.meta-inf.dest}"/> <!-- Creates a META-INF folder within output folder for compiled classes if needed -->
            </then>
        </if>
    	<!-- Copy faces-config.xml from template (no replacements needed) to META-INF folder within output folder for compiled classes -->
    	<!-- We need it because JSF evaluation of EL expressions is only enabled if gepeq.jar files contains a face-config.xml file within a META-INF folder -->
    	<copy file="${faces-config.meta-inf.conf}/${faces-config.meta-inf.conf.name}" tofile="${faces-config.meta-inf.dest}/${faces-config.meta-inf.dest.name}"/>
    </target>
	
    <target description="Deletes directory used as otuput for building OpenMark Authoring Tool web application (GEPEQ)" depends="save-keep" name="clean">
        <delete dir="${build.classes}"/>
    </target>
	
    <target description="Deletes directory used as output for packing OpenMark Authoring Tool web application (GEPEQ) compiled classes to jar files" depends="save-keep" name="clean-jars">
        <delete dir="${build.jars}"/>
    </target>
	
	<target description="Deletes directories used as output for encryption" depends="save-keep" name="clean-encryption">
		<delete dir="${gepeq.encryption.output}"/>
        <delete dir="${om-tn.encryption.output}"/>
        <delete dir="${om-tn-pro.encryption.output}"/>
	</target>
	
	<target description="Deletes directories used as output for deploying web applications" depends="save-keep" name="clean-webapps">
		<delete dir="${gepeq-webapp.output}"/>
		<delete dir="${om-webapp.output}"/>
        <delete dir="${om-qe-webapp.output}"/>
        <delete dir="${om-tn-webapp.output}"/>
        <delete dir="${om-qe-pro-webapp.output}"/>
        <delete dir="${om-tn-pro-webapp.output}"/>
	</target>
	
	<target description="Deletes directories used as temporary output for files from folders to keep" name="clean-keep">
		<delete dir="${build.keep}"/>
	</target>
	
    <target description="Save files from folders to keep so they will not be lost even if they are within an output folder" name="save-keep">
        <if>
        	<not>
        		<equals arg1="${save-keep-done}" arg2="true"/>
        	</not>
        	<then>
                <!-- Save resources to keep for resources folder when deploying OpenMark Authoring Tool web application (GEPEQ) -->
                <if>
                    <and>
                        <not>
                            <equals arg1="${gepeq.resources.keep-from.folder}" arg2=""/>
                        </not>
                        <available file="${gepeq.resources.keep-from.folder}" type="dir"/>
                    </and>
                    <then>
                        <mkdir dir="${build.keep}/gepeq/${gepeq.resources.folder}"/>
                        <copy todir="${build.keep}/gepeq/${gepeq.resources.folder}">
                            <fileset dir="${gepeq.resources.keep-from.folder}"/>
                        </copy>
                    </then>
                </if>
                <!-- Save questions to keep for questions folder when deploying OpenMark Authoring Tool web application (GEPEQ) -->
                <if>
                    <and>
                        <not>
                            <equals arg1="${gepeq.om-questions.keep-from.folder}" arg2=""/>
                        </not>
                        <available file="${gepeq.om-questions.keep-from.folder}" type="dir"/>
                    </and>
                    <then>
                        <mkdir dir="${build.keep}/gepeq/${gepeq.om-questions.folder}"/>
                        <copy todir="${build.keep}/gepeq/${gepeq.om-questions.folder}">
                            <fileset dir="${gepeq.om-questions.keep-from.folder}"/>
                        </copy>
                    </then>
                </if>
                <!-- Save imported questions to keep for imported_questions folder when deploying OpenMark Authoring Tool web application (GEPEQ) -->
                <if>
                    <and>
                        <not>
                            <equals arg1="${gepeq.import-questions.keep-from.folder}" arg2=""/>
                        </not>
                        <available file="${gepeq.import-questions.keep-from.folder}" type="dir"/>
                    </and>
                    <then>
                        <mkdir dir="${build.keep}/gepeq/${gepeq.import-questions.folder}"/>
                        <copy todir="${build.keep}/gepeq/${gepeq.import-questions.folder}">
                            <fileset dir="${gepeq.import-questions.keep-from.folder}"/>
                        </copy>
                    </then>
                </if>
                <!-- Save exported questions to keep for exported_questions folder when deploying OpenMark Authoring Tool web application (GEPEQ) -->
                <if>
                    <and>
                        <not>
                            <equals arg1="${gepeq.export-questions.keep-from.folder}" arg2=""/>
                        </not>
                        <available file="${gepeq.export-questions.keep-from.folder}" type="dir"/>
                    </and>
                    <then>
                        <mkdir dir="${build.keep}/gepeq/${gepeq.export-questions.folder}"/>
                        <copy todir="${build.keep}/gepeq/${gepeq.export-questions.folder}">
                            <fileset dir="${gepeq.export-questions.keep-from.folder}"/>
                        </copy>
                    </then>
                </if>
                <!-- Save questions to keep for questions folder when deploying OpenMark Developer web application (om) -->
                <if>
                    <and>
                        <not>
                            <equals arg1="${om.questions.keep-from.folder}" arg2=""/>
                        </not>
                        <available file="${om.questions.keep-from.folder}" type="dir"/>
                    </and>
                    <then>
                        <mkdir dir="${build.keep}/om/questions"/>
                        <copy todir="${build.keep}/om/questions">
                            <fileset dir="${om.questions.keep-from.folder}"/>
                        </copy>
                    </then>
                </if>
                <!-- Save question jars generated with OpenMark Authoring Tool to keep for questionbank folder when deploying OpenMark Test Navigator web application for preview environment (om-tn) -->
                <if>
                    <and>
                        <not>
                            <equals arg1="${om-tn.questionbank.gepeq-keep-from.folder}" arg2=""/>
                        </not>
                        <available file="${om-tn.questionbank.gepeq-keep-from.folder}" type="dir"/>
                    </and>
                    <then>
                        <mkdir dir="${build.keep}/om-tn/questionbank"/>
                        <copy todir="${build.keep}/om-tn/questionbank">
                            <fileset dir="${om-tn.questionbank.gepeq-keep-from.folder}">
                                <filename regex="u([0-9])+\.q([0-9])+\.([0-9])+\.([0-9])+\.jar"/>
                            </fileset>
                        </copy>
                    </then>
                </if>
                <!-- Save questions/tests deploy/test xml files generated with OpenMark Authoring Tool to keep for testbank folder when deploying OpenMark Test Navigator web application for preview environment (om-tn) -->
                <if>
                    <and>
                        <not>
                            <equals arg1="${om-tn.testbank.gepeq-keep-from.folder}" arg2=""/>
                        </not>
                        <available file="${om-tn.testbank.gepeq-keep-from.folder}" type="dir"/>
                    </and>
                    <then>
                        <mkdir dir="${build.keep}/om-tn/testbank"/>
                        <copy todir="${build.keep}/om-tn/testbank">
                            <fileset dir="${om-tn.testbank.gepeq-keep-from.folder}">
                                <filename regex="u([0-9])+\.q([0-9])+\.deploy\.xml"/>
                            </fileset>
                            <fileset dir="${om-tn.testbank.gepeq-keep-from.folder}">
                                <filename regex="u([0-9])+\.t([0-9])+\.test\.xml"/>
                            </fileset>
                            <fileset dir="${om-tn.testbank.gepeq-keep-from.folder}">
                                <filename regex="u([0-9])+\.t([0-9])+\.deploy\.xml"/>
                            </fileset>
                        </copy>
                    </then>
                </if>
                <!-- Save logs to keep for logs folder when deploying OpenMark Test Navigator web application for preview environment (om-tn) -->
                <if>
                    <and>
                        <not>
                            <equals arg1="${om-tn.logs.keep-from.folder}" arg2=""/>
                        </not>
                        <available file="${om-tn.logs.keep-from.folder}" type="dir"/>
                    </and>
                    <then>
                        <mkdir dir="${build.keep}/om-tn/logs"/>
                        <copy todir="${build.keep}/om-tn/logs">
                            <fileset dir="${om-tn.logs.keep-from.folder}"/>
                        </copy>
                    </then>
                </if>
                <!-- Save question jars generated with OpenMark Authoring Tool to keep for questionbank folder when deploying OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
                <if>
                    <and>
                        <not>
                            <equals arg1="${om-tn-pro.questionbank.gepeq-keep-from.folder}" arg2=""/>
                        </not>
                        <available file="${om-tn-pro.questionbank.gepeq-keep-from.folder}" type="dir"/>
                    </and>
                    <then>
                        <mkdir dir="${build.keep}/om-tn-pro/questionbank"/>
                        <copy todir="${build.keep}/om-tn-pro/questionbank">
                            <fileset dir="${om-tn-pro.questionbank.gepeq-keep-from.folder}">
                                <filename regex="u([0-9])+\.q([0-9])+\.([0-9])+\.([0-9])+\.jar"/>
                            </fileset>
                        </copy>
                    </then>
                </if>
                <!-- Save questions/tests deploy/test xml files generated with OpenMark Authoring Tool to keep for testbank folder when deploying OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
                <if>
                    <and>
                        <not>
                            <equals arg1="${om-tn-pro.testbank.gepeq-keep-from.folder}" arg2=""/>
                        </not>
                        <available file="${om-tn-pro.testbank.gepeq-keep-from.folder}" type="dir"/>
                    </and>
                    <then>
                        <mkdir dir="${build.keep}/om-tn-pro/testbank"/>
                        <copy todir="${build.keep}/om-tn-pro/testbank">
                            <fileset dir="${om-tn-pro.testbank.gepeq-keep-from.folder}">
                                <filename regex="u([0-9])+\.q([0-9])+\.deploy\.xml"/>
                            </fileset>
                            <fileset dir="${om-tn-pro.testbank.gepeq-keep-from.folder}">
                                <filename regex="u([0-9])+\.t([0-9])+\.test\.xml"/>
                            </fileset>
                            <fileset dir="${om-tn-pro.testbank.gepeq-keep-from.folder}">
                                <filename regex="u([0-9])+\.t([0-9])+\.deploy\.xml"/>
                            </fileset>
                        </copy>
                    </then>
                </if>
                <!-- Save logs to keep for logs folder when deploying OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
                <if>
                    <and>
                        <not>
                            <equals arg1="${om-tn-pro.logs.keep-from.folder}" arg2=""/>
                        </not>
                        <available file="${om-tn-pro.logs.keep-from.folder}" type="dir"/>
                    </and>
                    <then>
                        <mkdir dir="${build.keep}/om-tn-pro/logs"/>
                        <copy todir="${build.keep}/om-tn-pro/logs">
                            <fileset dir="${om-tn-pro.logs.keep-from.folder}"/>
                        </copy>
                    </then>
                </if>
        		<property name="save-keep.true.constant" value="true"/>
        		<propertycopy name="save-keep.done" from="save-keep.true.constant" override="true"/>
        	</then>
    	</if>
    </target>
	
    <target description="Deletes all directories used as output" depends="clean-keep,clean,clean-encryption,clean-jars,clean-webapps" name="cleanall"/>
	
    <target depends="build-subprojects,build-project" name="build"/>
    	
    <target name="build-subprojects"/>
	
    <target description="Builds OpenMark Authoring Tool web application (GEPEQ)" depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="${build.classes}" includeantruntime="false" source="${source}" target="${target}" encoding="${encoding}"> <!-- We need to include encoding to avoid warnings -->
            <compilerarg line="-XDignore.symbol.file"/> <!-- This argument is to avoid some warnings -->
            <src path="${src}"/>
            <classpath refid="gepeq.classpath"/>
        </javac>
    </target>
	
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
	
    <target description="Packages compiled class files to jar files" name="jar" depends="build">
        <if>
            <not>
                <available file="${build.jars}" type="dir"/>
            </not>
            <then>
                <mkdir dir="${build.jars}"/> <!-- Creates output folder for jar files if needed -->
            </then>
        </if>
    	<!-- Generates a jar file for OpenMark Authoring Tool library (gepeq.jar) -->
        <jar jarfile="${build.jars}/${gepeq.lib.name}" basedir="${build.classes}">
            <include name="${hibernate.conf.dest.name}"/>
            <include name="${gepeq.lib.classes.include}"/>
        	<include name="${gepeq.lib.meta_inf.include}"/>
        </jar>
        <!-- Generates a jar file for a patched version of JSF 2 library including some bug fixes -->
    	<copy file="${jsf.lib}/${jsf.lib.name}" tofile="${build.jars}/${jsf.lib.patched.name}"/>
    	<jar jarfile="${build.jars}/${jsf.lib.patched.name}" basedir="${build.classes}" update="true">
    		<include name="${jsf.lib.patched.classes.include}"/>
    	</jar>
        <!-- Generates a jar file for a patched version of Primefaces library including some bug fixes and improvements -->
    	<copy file="${primefaces.lib}/${primefaces.lib.name}" tofile="${build.jars}/${primefaces.lib.patched.name}" />
    	<jar jarfile="${build.jars}/${primefaces.lib.patched.name}" basedir="${build.classes}" update="true">
            <include name="${primefaces.lib.patched.classes.include}"/>
    	</jar>
    </target>
	
	<target description="Deploys OpenMark Authoring Tool web application (GEPEQ)" name="gepeq-webapp" depends="jar">
        <!-- Create needed output folders for deploying OpenMark Authoring Tool web application (GEPEQ)-->
		<if>
            <not>
                <available file="${gepeq-webapp.output}" type="dir"/>
            </not>
            <then>
                <mkdir dir="${gepeq-webapp.output}"/>
                <mkdir dir="${gepeq-webapp.output}/${gepeq.resources.folder}"/>
                <mkdir dir="${gepeq-webapp.output}/${gepeq.om-questions.folder}"/>
                <mkdir dir="${gepeq-webapp.output}/${gepeq.import-questions.folder}"/>
                <mkdir dir="${gepeq-webapp.output}/${gepeq.export-questions.folder}"/>
                <mkdir dir="${gepeq-webapp.output}/${gepeq.tmp.folder}"/>
                <mkdir dir="${gepeq-webapp.output}/WEB-INF/security"/>
                <mkdir dir="${gepeq-webapp.output}/WEB-INF/lib"/>
            </then>
            <else>
                <if>
                    <not>
                        <available file="${gepeq-webapp.output}/${gepeq.resources.folder}" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${gepeq-webapp.output}/${gepeq.resources.folder}"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${gepeq-webapp.output}/${gepeq.om-questions.folder}" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${gepeq-webapp.output}/${gepeq.om-questions.folder}"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${gepeq-webapp.output}/${gepeq.import-questions.folder}" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${gepeq-webapp.output}/${gepeq.import-questions.folder}"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${gepeq-webapp.output}/${gepeq.export-questions.folder}" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${gepeq-webapp.output}/${gepeq.export-questions.folder}"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${gepeq-webapp.output}/${gepeq.tmp.folder}" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${gepeq-webapp.output}/${gepeq.tmp.folder}"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${gepeq-webapp.output}/WEB-INF/security" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${gepeq-webapp.output}/WEB-INF/security"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${gepeq-webapp.output}/WEB-INF/lib" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${gepeq-webapp.output}/WEB-INF/lib"/>
                    </then>
                </if>
            </else>
        </if>
		<!-- Copy files from input OpenMark Authoring Tool web application (GEPEQ) to output folder, with some exceptions -->
		<copy todir="${gepeq-webapp.output}">
			<fileset dir="${gepeq-webapp.input}">
				<exclude name="${gepeq.resources.folder.src}/**"/>
				<exclude name="${gepeq.om-questions.folder.src}/**"/>
				<exclude name="${gepeq.import-questions.folder.src}/**"/>
				<exclude name="${gepeq.export-questions.folder.src}/**"/>
				<exclude name="${gepeq.tmp.folder.src}/**"/>
                <exclude name="WEB-INF/security/**"/>
				<exclude name="WEB-INF/lib/**"/>
                <exclude name="WEB-INF/${configuration.web-inf.conf.name}"/>
                <exclude name="WEB-INF/${faces-config.web-inf.conf.name}"/>
                <exclude name="WEB-INF/${questiontypes.web-inf.conf.name}"/>
				<exclude name="WEB-INF/${themes.web-inf.conf.name}"/>
                <exclude name="WEB-INF/${web.web-inf.conf.name}"/>
			</fileset>
		</copy>
		<!-- Copy faces-config.xml and questiontypes.xml from templates (no replacements needed) to WEB-INF folder within deploy output folder of OpenMark Authoring Tool web application (GEPEQ) -->
		<copy todir="${gepeq-webapp.output}/WEB-INF">
            <fileset file="${faces-config.web-inf.conf}/${faces-config.web-inf.conf.name}" />
            <fileset file="${questiontypes.web-inf.conf}/${questiontypes.web-inf.conf.name}" />
		</copy>
		<!-- Build proxy configuration -->
		<if>
			<equals arg1="${gepeq.proxy.url}" arg2=""/>
			<then>
				<var name="gepeq.proxy.config.var" value="&lt;!&#45;&#45;${line.separator}  "/>
			</then>
			<else>
				<var name="gepeq.proxy.config.var" value=""/>
			</else>
		</if>
        <var name="gepeq.proxy.config.var" value="${gepeq.proxy.config.var}&lt;Proxy-URL&gt;${gepeq.proxy.url}&lt;/Proxy-URL&gt;${line.separator}  "/>
		<if>
			<equals arg1="${gepeq.proxy.port}" arg2=""/>
			<then>
				<if>
					<equals arg1="${gepeq.proxy.url}" arg2=""/>
					<then>
						<var name="gepeq.proxy.config.var" value="${gepeq.proxy.config.var}&lt;Proxy-Port&gt;80&lt;/Proxy-Port&gt;${line.separator}  "/>
					</then>
					<else>
                        <var name="gepeq.proxy.config.var" value="${gepeq.proxy.config.var}&lt;!&#45;&#45; &lt;Proxy-Port&gt;80&lt;/Proxy-Port&gt; &#45;&#45;&gt;${line.separator}  "/>
					</else>
				</if>
			</then>
			<else>
				<var name="gepeq.proxy.config.var" value="${gepeq.proxy.config.var}&lt;Proxy-Port&gt;${gepeq.proxy.port}&lt;/Proxy-Port&gt;${line.separator}  "/>
			</else>
		</if>
		<if>
            <equals arg1="${gepeq.proxy.username}" arg2=""/>
			<then>
                <if>
                    <equals arg1="${gepeq.proxy.url}" arg2=""/>
                    <then>
                        <var name="gepeq.proxy.config.var" value="${gepeq.proxy.config.var}&lt;Proxy-Username&gt;&lt;/Proxy-Username&gt;${line.separator}  "/>
                    </then>
                    <else>
                        <var name="gepeq.proxy.config.var" value="${gepeq.proxy.config.var}&lt;!&#45;&#45; &lt;Proxy-Username&gt;&lt;/Proxy-Username&gt; &#45;&#45;&gt;${line.separator}  "/>
                    </else>
                </if>
			</then>
			<else>
				<var name="gepeq.proxy.config.var" value="${gepeq.proxy.config.var}&lt;Proxy-Username&gt;${gepeq.proxy.username}&lt;/Proxy-Username&gt;${line.separator}  "/>
			</else>
		</if>
		<if>
			<equals arg1="${gepeq.proxy.password}" arg2=""/>
			<then>
                <if>
                    <equals arg1="${gepeq.proxy.url}" arg2=""/>
                    <then>
                        <var name="gepeq.proxy.config.var" value="${gepeq.proxy.config.var}&lt;Proxy-Password&gt;&lt;/Proxy-Password&gt;${line.separator}  "/>
                    </then>
                    <else>
                        <var name="gepeq.proxy.config.var" value="${gepeq.proxy.config.var}&lt;!&#45;&#45; &lt;Proxy-Password&gt;&lt;/Proxy-Password&gt; &#45;&#45;&gt;${line.separator}  "/>
                    </else>
                </if>
			</then>
			<else>
                <var name="gepeq.proxy.config.var" value="${gepeq.proxy.config.var}&lt;Proxy-Password&gt;${gepeq.proxy.password}&lt;/Proxy-Password&gt;${line.separator}  "/>
			</else>
		</if>
		<if>
			<equals arg1="${gepeq.proxy.non-proxy-hosts}" arg2=""/>
			<then>
                <if>
                    <equals arg1="${gepeq.proxy.url}" arg2=""/>
                    <then>
                        <var name="gepeq.proxy.config.var" value="${gepeq.proxy.config.var}&lt;Non-Proxy-Hosts&gt;&lt;/Non-Proxy-Hosts&gt;"/>
                    </then>
                    <else>
                        <var name="gepeq.proxy.config.var" value="${gepeq.proxy.config.var}&lt;!&#45;&#45; &lt;Non-Proxy-Hosts&gt;&lt;/Non-Proxy-Hosts&gt; &#45;&#45;&gt;"/>
                    </else>
                </if>
			</then>
			<else>
				<var name="gepeq.proxy.config.var" value="${gepeq.proxy.config.var}&lt;Non-Proxy-Hosts&gt;${gepeq.proxy.non-proxy-hosts}&lt;/Non-Proxy-Hosts&gt;"/>
			</else>
		</if>
        <if>
            <equals arg1="${gepeq.proxy.url}" arg2=""/>
            <then>
                <var name="gepeq.proxy.config.var" value="${gepeq.proxy.config.var}${line.separator}  &#45;&#45;&gt;"/>
            </then>
        </if>
		<property name="gepeq.proxy.config" value="${gepeq.proxy.config.var}"/>
		<!-- Build OpenMark Test Navigator for preview environment (om-tn) encryption password if defined (or generated) -->
		<if>
			<equals arg1="${om-tn.encryption.password}" arg2=""/>
			<then>
				<property name="gepeq.om-tn.encryption.config" value="&lt;!&#45;&#45; &lt;OmTnEncryptionPassword&gt;&lt;/OmTnEncryptionPassword&gt; &#45;&#45;&gt;"/>
			</then>
			<else>
				<property name="gepeq.om-tn.encryption.config" value="&lt;OmTnEncryptionPassword&gt;${om-tn.encryption.password}&lt;/OmTnEncryptionPassword&gt;"/>
			</else>
		</if>
        <!-- Build OpenMark Test Navigator for publication environment (om-tn-pro) encryption password if defined (or generated) -->
        <if>
            <equals arg1="${om-tn-pro.encryption.password}" arg2=""/>
            <then>
                <property name="gepeq.om-tn-pro.encryption.config" value="&lt;!&#45;&#45; &lt;OmTnProEncryptionPassword&gt;&lt;/OmTnProEncryptionPassword&gt; &#45;&#45;&gt;"/>
            </then>
            <else>
                <property name="gepeq.om-tn-pro.encryption.config" value="&lt;OmTnProEncryptionPassword&gt;${om-tn-pro.encryption.password}&lt;/OmTnProEncryptionPassword&gt;"/>
            </else>
        </if>
		<!-- Generates a new configuration.xml file from template replacing some values with the appropiated values and copy it to WEB-INF folder within deploy output folder of OpenMark Authoring Tool web application (GEPEQ) -->
        <copy file="${configuration.web-inf.conf}/${configuration.web-inf.conf.name}" tofile="${gepeq-webapp.output}/WEB-INF/${configuration.web-inf.conf.name}">
            <filterchain>
                <replacetokens>
                    <token key="gepeq.resources.folder" value="${gepeq.resources.folder}"/>
                    <token key="gepeq.om.url" value="${gepeq.om.url}"/>
                    <token key="gepeq.om-tn.url" value="${gepeq.om-tn.url}"/>
                    <token key="gepeq.om-qe.url" value="${gepeq.om-qe.url}"/>
                    <token key="gepeq.om-tn-pro.url" value="${gepeq.om-tn-pro.url}"/>
                    <token key="gepeq.om-questions.folder" value="${gepeq.om-questions.folder}"/>
                    <token key="gepeq.import-questions.folder" value="${gepeq.import-questions.folder}"/>
                    <token key="gepeq.export-questions.folder" value="${gepeq.export-questions.folder}"/>
                    <token key="gepeq.tmp.folder" value="${gepeq.tmp.folder}"/>
                	<token key="gepeq.proxy.config" value="${gepeq.proxy.config}"/>
                    <token key="gepeq.om-tn.encryption.config" value="${gepeq.om-tn.encryption.config}"/>
                    <token key="gepeq.om-tn-pro.encryption.config" value="${gepeq.om-tn-pro.encryption.config}"/>
                </replacetokens>
            </filterchain>
        </copy>
        <!-- Generates a new web.xml file from template replacing some values with the appropiated values and copy it to WEB-INF folder within deploy output folder of OpenMark Authoring Tool web application (GEPEQ) -->
        <copy file="${web.web-inf.conf}/${web.web-inf.conf.name}" tofile="${gepeq-webapp.output}/WEB-INF/${web.web-inf.conf.name}">
            <filterchain>
                <replacetokens>
                    <token key="javax.faces.FACELETS_REFRESH_PERIOD" value="${javax.faces.FACELETS_REFRESH_PERIOD}"/>
                    <token key="javax.faces.PROJECT_STAGE" value="${javax.faces.PROJECT_STAGE}"/>
                    <token key="primefaces.fileupload.thresholdsize" value="${primefaces.fileupload.thresholdsize}"/>
                </replacetokens>
            </filterchain>
        </copy>
		<!-- Copy needed libraries to WEB-INF/lib folder within deploy output folder of OpenMark Authoring Tool web application (GEPEQ) -->
        <copy todir="${gepeq-webapp.output}/WEB-INF/lib">
        	<fileset dir="${build.jars}"/>
        	<fileset file="${el22-imp.lib}/${el22-imp.lib.name}"/>
            <fileset file="${hibernate.lib}/${hibernate.lib.name}"/>
            <fileset file="${hibernate-jpa.lib}/${hibernate-jpa.lib.name}"/>
            <fileset file="${generic.db.lib}/${generic.db.lib.name}"/>
            <fileset file="${encryption.lib}/${encryption.lib.name}"/>
            <fileset file="${commons-collections.lib}/${commons-collections.lib.name}"/>
            <fileset file="${commons-fileupload.lib}/${commons-fileupload.lib.name}"/>
            <fileset file="${commons-io.lib}/${commons-io.lib.name}"/>
            <fileset file="${commons-lang.lib}/${commons-lang.lib.name}"/>
            <fileset file="${commons-logging.lib}/${commons-logging.lib.name}"/>
            <fileset file="${commons-discovery.lib}/${commons-discovery.lib.name}"/>
            <fileset file="${commons-httpclient.lib}/${commons-httpclient.lib.name}"/>
            <fileset file="${commons-annotations.lib}/${commons-annotations.lib.name}"/>
            <fileset file="${axis.lib}/${axis.lib.name}"/>
            <fileset file="${jaxrpc.lib}/${jaxrpc.lib.name}"/>
            <fileset file="${jtidy.lib}/${jtidy.lib.name}"/>
            <fileset file="${dom4j.lib}/${dom4j.lib.name}"/>
            <fileset file="${slf4j-api.lib}/${slf4j-api.lib.name}"/>
            <fileset file="${slf4j-imp.lib}/${slf4j-imp.lib.name}"/>
            <fileset file="${javassist.lib}/${javassist.lib.name}"/>
            <fileset file="${jta.lib}/${jta.lib.name}"/>
            <fileset file="${wsdl4j.lib}/${wsdl4j.lib.name}"/>
            <fileset file="${log4j.lib}/${log4j.lib.name}"/>
            <fileset file="${rome.lib}/${rome.lib.name}"/>
            <fileset file="${jstl-api.lib}/${jstl-api.lib.name}"/>
            <fileset file="${jstl-imp.lib}/${jstl-imp.lib.name}"/>
            <fileset file="${saaj.lib}/${saaj.lib.name}"/>
            <fileset file="${antlr.lib}/${antlr.lib.name}"/>
        </copy>
        <!-- Generates a new themes.xml file from template replacing some values with the appropiated values and copy it to WEB-INF folder within deploy output folder of OpenMark Authoring Tool web application (GEPEQ) -->
		<var name="gepeq.themes.var" value=""/>
		<for list="${themes}" param="theme"> <!-- First we process "themes" list (with themes included within Primefaces library) -->
			<sequential>
	            <if>
	                <equals arg1="${themes.default}" arg2="@{theme}"/>
	                <then>
	                    <var name="gepeq.themes.var" value="${gepeq.themes.var}${line.separator}  &lt;Theme default=&quot;true&quot;&gt;${line.separator}    &lt;Name&gt;@{theme}&lt;/Name&gt;${line.separator}    &lt;DisplayName&gt;"/>
	                </then>
	                <else>
	                    <var name="gepeq.themes.var" value="${gepeq.themes.var}${line.separator}  &lt;Theme&gt;${line.separator}    &lt;Name&gt;@{theme}&lt;/Name&gt;${line.separator}    &lt;DisplayName&gt;"/>
	                </else>
	            </if>
				<propertycopy name="theme.display-name" from="theme-@{theme}.display-name" override="true"/>
				<var name="gepeq.themes.var" value="${gepeq.themes.var}${theme.display-name}&lt;/DisplayName&gt;${line.separator}  &lt;/Theme&gt;"/>
			</sequential>
		</for>
	    <for list="${additional-themes}" param="theme"> <!-- Finally we process "additional-themes" list (with themes not included within Primefaces library, they need an additional jar file)-->
	        <sequential>
                <if>
                    <equals arg1="${themes.default}" arg2="@{theme}"/>
                    <then>
                        <var name="gepeq.themes.var" value="${gepeq.themes.var}${line.separator}  &lt;Theme default=&quot;true&quot;&gt;${line.separator}    &lt;Name&gt;@{theme}&lt;/Name&gt;${line.separator}    &lt;DisplayName&gt;"/>
                    </then>
                    <else>
                        <var name="gepeq.themes.var" value="${gepeq.themes.var}${line.separator}  &lt;Theme&gt;${line.separator}    &lt;Name&gt;@{theme}&lt;/Name&gt;${line.separator}    &lt;DisplayName&gt;"/>
                    </else>
                </if>
                <propertycopy name="theme.display-name" from="theme-@{theme}.display-name" override="true"/>
                <var name="gepeq.themes.var" value="${gepeq.themes.var}${theme.display-name}&lt;/DisplayName&gt;${line.separator}  &lt;/Theme&gt;"/>
	            <!-- Note that every additional theme needs an additional jar file, so we copy it to WEB-INF/lib folder within deploy output folder of OpenMark Authoring Tool web application (GEPEQ)-->
	        	<propertycopy name="theme-to-copy" from="theme-@{theme}" override="true"/>
	            <propertycopy name="theme-to-copy.name" from="theme-@{theme}.name" override="true"/>
	            <copy file="${theme-to-copy}/${theme-to-copy.name}" todir="${gepeq-webapp.output}/WEB-INF/lib"/>
	        </sequential>
	    </for>
		<property name="gepeq.themes" value="${gepeq.themes.var}"/>
        <copy file="${themes.web-inf.conf}/${themes.web-inf.conf.name}" tofile="${gepeq-webapp.output}/WEB-INF/${themes.web-inf.conf.name}">
            <filterchain>
                <replacetokens>
                    <token key="gepeq.themes" value="${gepeq.themes}"/>
                </replacetokens>
            </filterchain>
        </copy>
		<if>
			<equals arg1="${gepeq.encryption.enabled}" arg2="true"/>
			<then>
				<!-- If GEPEQ encryption is enabled we need to deploy private key to WEB-INF/security folder within deploy output folder of OpenMark Authoring Tool web application (GEPEQ) -->
				<copy file="${gepeq.encryption.private-key}/${gepeq.encryption.private-key.name}" todir="${gepeq-webapp.output}/WEB-INF/security"/>
				<chmod file="${gepeq-webapp.output}/WEB-INF/security/${gepeq.encryption.private-key.name}" perm="600"/>
			</then>
		</if>
		<if>
			<and>
	            <not>
	                <equals arg1="${gepeq.resources.keep-from.folder}" arg2=""/>
	            </not>
				<available file="${build.keep}/gepeq/${gepeq.resources.folder}" type="dir"/>
			</and>
			<then>
				<!-- If needed copy some resources to resources folder of deployed OpenMark Authoring Tool web application (GEPEQ) -->
		        <copy todir="${gepeq-webapp.output}/${gepeq.resources.folder}">
		            <fileset dir="${build.keep}/gepeq/${gepeq.resources.folder}"/>
				</copy>
			</then>
		</if>
        <if>
        	<and>
                <not>
                    <equals arg1="${gepeq.om-questions.keep-from.folder}" arg2=""/>
                </not>
        		<available file="${build.keep}/gepeq/${gepeq.om-questions.folder}" type="dir"/>
        	</and>
            <then>
                <!-- If needed copy some questions to questions folder of deployed OpenMark Authoring Tool web application (GEPEQ) -->
                <copy todir="${gepeq-webapp.output}/${gepeq.om-questions.folder}">
                    <fileset dir="${build.keep}/gepeq/${gepeq.om-questions.folder}"/>
                </copy>
            </then>
        </if>
        <if>
        	<and>
                <not>
                    <equals arg1="${gepeq.import-questions.keep-from.folder}" arg2=""/>
                </not>
        		<available file="${build.keep}/gepeq/${gepeq.import-questions.folder}" type="dir"/>
        	</and>
            <then>
                <!-- If needed copy some imported questions to imported_questions folder of deployed OpenMark Authoring Tool web application (GEPEQ) -->
                <copy todir="${gepeq-webapp.output}/${gepeq.import-questions.folder}">
                    <fileset dir="${build.keep}/gepeq/${gepeq.import-questions.folder}"/>
                </copy>
            </then>
        </if>
        <if>
        	<and>
                <not>
                    <equals arg1="${gepeq.export-questions.keep-from.folder}" arg2=""/>
                </not>
        		<available file="${build.keep}/gepeq/${gepeq.export-questions.folder}" type="dir"/>
        	</and>
            <then>
                <!-- If needed copy some exported questions to exported_questions folder of deployed OpenMark Authoring Tool web application (GEPEQ) -->
                <copy todir="${gepeq-webapp.output}/${gepeq.export-questions.folder}">
                    <fileset dir="${build.keep}/gepeq/${gepeq.export-questions.folder}"/>
                </copy>
            </then>
        </if>
	</target>
	
    <target description="Deploys OpenMark Developer web application (om)" depends="save-keep" name="om-webapp">
        <!-- Create needed output folders for deploying OpenMark Developer web application (om)-->
        <if>
            <not>
                <available file="${om-webapp.output}" type="dir"/>
            </not>
            <then>
                <mkdir dir="${om-webapp.output}"/>
                <mkdir dir="${om-webapp.output}/questions"/>
                <mkdir dir="${om-webapp.output}/WEB-INF/lib"/>
            </then>
        	<else>
                <if>
                    <not>
                        <available file="${om-webapp.output}/questions" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-webapp.output}/questions"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${om-webapp.output}/WEB-INF/lib" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-webapp.output}/WEB-INF/lib"/>
                    </then>
                </if>
        	</else>
        </if>
        <!-- Copy files from input OpenMark Developer web application (om) to output folder, with some exceptions -->
    	<copy todir="${om-webapp.output}">
    	    <fileset dir="${om-webapp.input}">
    			<exclude name="questions/**"/>
    	        <exclude name="WEB-INF/lib/**"/>
    	    	<exclude name="WEB-INF/${om.server-config.web-inf.conf.name}"/>
    	    	<exclude name="WEB-INF/${om.web.web-inf.conf.name}"/>
    	    </fileset>
    	</copy>
        <!-- Copy server-config.wsdd from template (no replacements needed) to WEB-INF folder within deploy output folder of OpenMark Developer web application (om) -->
        <copy file="${om.server-config.web-inf.conf}/${om.server-config.web-inf.conf.name}" tofile="${om-webapp.output}/WEB-INF/${om.server-config.web-inf.conf.name}"/>
        <!-- Generates a new web.xml file from template replacing some values with the appropiated values and copy it to WEB-INF folder within deploy output folder of OpenMark Developer web application (om) -->
    	<copy file="${om.web.web-inf.conf}/${om.web.web-inf.conf.name}" tofile="${om-webapp.output}/WEB-INF/${om.web.web-inf.conf.name}">
        	<filterchain>
        		<replacetokens>
        			<token key="jdk-home" value="${jdk-home}"/>
                    <token key="ant-home" value="${ant-home}"/>
                    <token key="om.devservlet" value="${om.devservlet}"/>
        		</replacetokens>
        	</filterchain>
    	</copy>
        <!-- Copy needed libraries to WEB-INF/lib folder within deploy output folder of OpenMark Developer web application (om) -->
        <copy todir="${om-webapp.output}/WEB-INF/lib">
        	<fileset file="${om.lib}/${om.lib.name}"/>
            <fileset file="${om.axis.lib}/${om.axis.lib.name}"/>
            <fileset file="${om.jaf.lib}/${om.jaf.lib.name}"/>
            <fileset file="${om.apple-java-ext.lib}/${om.apple-java-ext.lib.name}"/>
            <fileset file="${om.batik-anim.lib}/${om.batik-anim.lib.name}"/>
            <fileset file="${om.batik-awt-util.lib}/${om.batik-awt-util.lib.name}"/>
            <fileset file="${om.batik-css.lib}/${om.batik-css.lib.name}"/>
            <fileset file="${om.batik-dom.lib}/${om.batik-dom.lib.name}"/>
            <fileset file="${om.batik-ext.lib}/${om.batik-ext.lib.name}"/>
            <fileset file="${om.batik-parser.lib}/${om.batik-parser.lib.name}"/>
            <fileset file="${om.batik-svg-dom.lib}/${om.batik-svg-dom.lib.name}"/>
            <fileset file="${om.batik-util.lib}/${om.batik-util.lib.name}"/>
            <fileset file="${om.batik-xml.lib}/${om.batik-xml.lib.name}"/>
            <fileset file="${om.commons-cli.lib}/${om.commons-cli.lib.name}"/>
            <fileset file="${om.commons-discovery.lib}/${om.commons-discovery.lib.name}"/>
            <fileset file="${om.commons-io.lib}/${om.commons-io.lib.name}"/>
            <fileset file="${om.commons-lang.lib}/${om.commons-lang.lib.name}"/>
            <fileset file="${om.commons-logging.lib}/${om.commons-logging.lib.name}"/>
            <fileset file="${om.jaxrpc.lib}/${om.jaxrpc.lib.name}"/>
            <fileset file="${om.jazzy.lib}/${om.jazzy.lib.name}"/>
            <fileset file="${om.jeuclid-cli.lib}/${om.jeuclid-cli.lib.name}"/>
            <fileset file="${om.jeuclid-core.lib}/${om.jeuclid-core.lib.name}"/>
            <fileset file="${om.jeuclid-mathviewer.lib}/${om.jeuclid-mathviewer.lib.name}"/>
            <fileset file="${om.jeuclid-minimal.lib}/${om.jeuclid-minimal.lib.name}"/>
            <fileset file="${om.mail.lib}/${om.mail.lib.name}"/>
            <fileset file="${om.saaj.lib}/${om.saaj.lib.name}"/>
            <fileset file="${om.wsdl4j.lib}/${om.wsdl4j.lib.name}"/>
            <fileset file="${om.xml-apis.lib}/${om.xml-apis.lib.name}"/>
            <fileset file="${om.xml-apis-ext.lib}/${om.xml-apis-ext.lib.name}"/>
            <fileset file="${om.xmlgraphics.lib}/${om.xmlgraphics.lib.name}"/>
    	</copy>
        <if>
        	<and>
                <not>
                    <equals arg1="${om.questions.keep-from.folder}" arg2=""/>
                </not>
        		<available file="${build.keep}/om/questions" type="dir"/>
        	</and>
            <then>
            	<!-- If needed copy some questions to questions folder of deployed OpenMark Development web application (om) -->
                <copy todir="${om-webapp.output}/questions">
                    <fileset dir="${build.keep}/om/questions"/>
                </copy>
            </then>
        </if>
	</target>
	
    <target description="Deploys OpenMark Question Engine web application for preview environment (om-qe)" depends="save-keep" name="om-qe-webapp">
        <!-- Create needed output folders for deploying OpenMark Question Engine web application for preview environment (om-qe)-->
        <if>
            <not>
                <available file="${om-qe-webapp.output}" type="dir"/>
            </not>
            <then>
                <mkdir dir="${om-qe-webapp.output}"/>
                <mkdir dir="${om-qe-webapp.output}"/>
                <mkdir dir="${om-qe-webapp.output}/questioncache"/>
                <mkdir dir="${om-qe-webapp.output}/WEB-INF/attachments"/>
                <mkdir dir="${om-qe-webapp.output}/WEB-INF/lib"/>
            </then>
        	<else>
                <if>
                    <not>
                        <available file="${om-qe-webapp.output}/questioncache" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-qe-webapp.output}/questioncache"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${om-qe-webapp.output}/WEB-INF/attachments" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-qe-webapp.output}/WEB-INF/attachments"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${om-qe-webapp.output}/WEB-INF/lib" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-qe-webapp.output}/WEB-INF/lib"/>
                    </then>
                </if>
        	</else>
        </if>
        <!-- Copy files from input OpenMark Question Engine web application for preview environment (om-qe) to output folder, with some exceptions -->
        <copy todir="${om-qe-webapp.output}">
            <fileset dir="${om-qe-webapp.input}">
                <exclude name="questioncache/**"/>
                <exclude name="WEB-INF/attachments/**"/>
                <exclude name="WEB-INF/lib/**"/>
            	<exclude name="WEB-INF/${om-qe.qengine.sample.web-inf.name}"/>
                <exclude name="WEB-INF/${om-qe.server-config.web-inf.conf.name}"/>
                <exclude name="WEB-INF/${om-qe.web.web-inf.conf.name}"/>
            </fileset>
        </copy>
        <!-- Generates a new server-config.wsdd file from template replacing some values with the appropiated values and copy it to WEB-INF folder within deploy output folder of OpenMark Question Engine web application for preview environment (om-qe) -->
        <copy file="${om-qe.server-config.web-inf.conf}/${om-qe.server-config.web-inf.conf.name}" tofile="${om-qe-webapp.output}/WEB-INF/${om-qe.server-config.web-inf.conf.name}">
        	<filterchain>
        		<replacetokens>
        			<token key="om-qe.om-service" value="${om-qe.om-service}"/>
        		</replacetokens>
        	</filterchain>
        </copy>
        <!-- Copy web.xml from template (no replacements needed) to WEB-INF folder within deploy output folder of OpenMark Question Engine web application for preview environment (om-qe) -->
        <copy file="${om-qe.web.web-inf.conf}/${om-qe.web.web-inf.conf.name}" tofile="${om-qe-webapp.output}/WEB-INF/${om-qe.web.web-inf.conf.name}"/>
        <!-- Copy needed libraries to WEB-INF/lib folder within deploy output folder of OpenMark Question Engine web application for preview enviroment (om-qe) -->
    	<copy todir="${om-qe-webapp.output}/WEB-INF/lib">
            <fileset file="${om-qe.lib}/${om-qe.lib.name}"/>
            <fileset file="${om.axis.lib}/${om.axis.lib.name}"/>
            <fileset file="${om.axis-ant.lib}/${om.axis-ant.lib.name}"/>
            <fileset file="${om.apple-java-ext.lib}/${om.apple-java-ext.lib.name}"/>
            <fileset file="${om.batik-anim.lib}/${om.batik-anim.lib.name}"/>
            <fileset file="${om.batik-awt-util.lib}/${om.batik-awt-util.lib.name}"/>
            <fileset file="${om.batik-css.lib}/${om.batik-css.lib.name}"/>
            <fileset file="${om.batik-dom.lib}/${om.batik-dom.lib.name}"/>
            <fileset file="${om.batik-ext.lib}/${om.batik-ext.lib.name}"/>
            <fileset file="${om.batik-parser.lib}/${om.batik-parser.lib.name}"/>
            <fileset file="${om.batik-svg-dom.lib}/${om.batik-svg-dom.lib.name}"/>
            <fileset file="${om.batik-util.lib}/${om.batik-util.lib.name}"/>
            <fileset file="${om.batik-xml.lib}/${om.batik-xml.lib.name}"/>
            <fileset file="${om.commons-cli.lib}/${om.commons-cli.lib.name}"/>
            <fileset file="${om.commons-discovery.lib}/${om.commons-discovery.lib.name}"/>
            <fileset file="${om.commons-io.lib}/${om.commons-io.lib.name}"/>
            <fileset file="${om.commons-lang.lib}/${om.commons-lang.lib.name}"/>
            <fileset file="${om.commons-logging.lib}/${om.commons-logging.lib.name}"/>
            <fileset file="${om.jaxrpc.lib}/${om.jaxrpc.lib.name}"/>
            <fileset file="${om.jazzy.lib}/${om.jazzy.lib.name}"/>
            <fileset file="${om.jeuclid-cli.lib}/${om.jeuclid-cli.lib.name}"/>
            <fileset file="${om.jeuclid-core.lib}/${om.jeuclid-core.lib.name}"/>
            <fileset file="${om.jeuclid-mathviewer.lib}/${om.jeuclid-mathviewer.lib.name}"/>
            <fileset file="${om.jeuclid-minimal.lib}/${om.jeuclid-minimal.lib.name}"/>
            <fileset file="${om.jeuclid-mathviewer.lib}/${om.jeuclid-mathviewer.lib.name}"/>
        	<fileset file="${om.log4j.lib}/${om.log4j.lib.name}"/>
            <fileset file="${om.saaj.lib}/${om.saaj.lib.name}"/>
            <fileset file="${om.wsdl4j.lib}/${om.wsdl4j.lib.name}"/>
            <fileset file="${om.xml-apis.lib}/${om.xml-apis.lib.name}"/>
            <fileset file="${om.xml-apis-ext.lib}/${om.xml-apis-ext.lib.name}"/>
            <fileset file="${om.xmlgraphics.lib}/${om.xmlgraphics.lib.name}"/>
        </copy>
    </target>
	
    <target description="Performs encryption needed before deploying OpenMark Test Navigator web application for preview environment (om-tn)" depends="save-keep" name="om-tn-encryption">
        <if>
            <equals arg1="${om-tn.encryption.enabled}" arg2="true"/> <!-- Check that om-tn encryption is enabled -->
            <then>
                <if>
                    <not>
                        <available file="${om-tn.encryption.output}" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-tn.encryption.output}"/> <!-- Create om-tn encryption output folder if needed -->
                    </then>
                </if>
                <if>
                    <equals arg1="${om-tn.encryption.generate-keypair}" arg2="true"/> <!-- Check if we need to generate a new encryption key pair for GEPEQ -->
                    <then>
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                          <arg value="savekeypair_enc_priv:${om-tn.encryption.output}"/>
                        </java>
                        <!-- We assign public and private key properties for om-tn to reference the generated key pair -->
                        <propertycopy name="om-tn.encryption.public-key" from="om-tn.encryption.output" override="true"/>
                        <property name="om-tn.encryption.public-key.name.constant" value="public.key"/>
                        <propertycopy name="om-tn.encryption.public-key.name" from="om-tn.encryption.public-key.name.constant" override="true"/>
                        <propertycopy name="om-tn.encryption.private-key" from="om-tn.encryption.output" override="true"/>
                        <property name="om-tn.encryption.private-key.name.constant" value="private.key"/>
                        <propertycopy name="om-tn.encryption.private-key.name" from="om-tn.encryption.private-key.name.constant" override="true"/>
                    </then>
                    <elseif>
                        <equals arg1="${om-tn.encryption.use-gepeq-keypair}" arg2="true"/>
                        <then>
                        	<!-- If needed we assign public and private key properties for om-tn to reference GEPEQ key pair -->
                            <propertycopy name="om-tn.encryption.public-key" from="gepeq.encryption.public-key" override="true"/>
                            <propertycopy name="om-tn.encryption.public-key.name" from="gepeq.encryption.public-key.name" override="true"/>
                        	<propertycopy name="om-tn.encryption.private-key" from="gepeq.encryption.private-key" override="true"/>
                        	<propertycopy name="om-tn.encryption.private-key.name" from="gepeq.encryption.private-key.name" override="true"/>
                        </then>
                    </elseif>
                </if>
                <if>
                    <available file="${om-tn.encryption.public-key}/${om-tn.encryption.public-key.name}"/> <!-- Check that public key file exist -->
                    <then>
                    	<!-- Encrypt om-tn DB server -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn.encryption.public-key}"/>
                            <arg value="${om-tn.server}"/>
                            <arg value="-o"/>
                            <arg value="om-tn.server.txt"/>
                        </java>
                        <loadfile property="om-tn.server.encrypted" srcfile="${om-tn.encryption.public-key}/om-tn.server.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn.server" from="om-tn.server.encrypted" override="true"/>
                        <!-- Encrypt om-tn DB name -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn.encryption.public-key}"/>
                            <arg value="${om-tn.dbname}"/>
                            <arg value="-o"/>
                            <arg value="om-tn.dbname.txt"/>
                        </java>
                        <loadfile property="om-tn.dbname.encrypted" srcfile="${om-tn.encryption.public-key}/om-tn.dbname.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn.dbname" from="om-tn.dbname.encrypted" override="true"/>
                        <!-- Encrypt om-tn DB username -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn.encryption.public-key}"/>
                            <arg value="${om-tn.username}"/>
                            <arg value="-o"/>
                            <arg value="om-tn.username.txt"/>
                        </java>
                        <loadfile property="om-tn.username.encrypted" srcfile="${om-tn.encryption.public-key}/om-tn.username.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn.username" from="om-tn.username.encrypted" override="true"/>
                        <!-- Encrypt om-tn DB password -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn.encryption.public-key}"/>
                            <arg value="${om-tn.password}"/>
                            <arg value="-o"/>
                            <arg value="om-tn.password.txt"/>
                        </java>
                        <loadfile property="om-tn.password.encrypted" srcfile="${om-tn.encryption.public-key}/om-tn.password.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn.password" from="om-tn.password.encrypted" override="true"/>
                        <!-- Encrypt GEPEQ DB server -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn.encryption.public-key}"/>
                            <arg value="${om-tn.gepeq.server}"/>
                            <arg value="-o"/>
                            <arg value="om-tn.gepeq.server.txt"/>
                        </java>
                        <loadfile property="om-tn.gepeq.server.encrypted" srcfile="${om-tn.encryption.public-key}/om-tn.gepeq.server.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn.gepeq.server" from="om-tn.gepeq.server.encrypted" override="true"/>
                        <!-- Encrypt GEPEQ DB name -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn.encryption.public-key}"/>
                            <arg value="${om-tn.gepeq.dbname}"/>
                            <arg value="-o"/>
                            <arg value="om-tn.gepeq.dbname.txt"/>
                        </java>
                        <loadfile property="om-tn.gepeq.dbname.encrypted" srcfile="${om-tn.encryption.public-key}/om-tn.gepeq.dbname.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn.gepeq.dbname" from="om-tn.gepeq.dbname.encrypted" override="true"/>
                        <!-- Encrypt GEPEQ DB username -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn.encryption.public-key}"/>
                            <arg value="${om-tn.gepeq.username}"/>
                            <arg value="-o"/>
                            <arg value="om-tn.gepeq.username.txt"/>
                        </java>
                        <loadfile property="om-tn.gepeq.username.encrypted" srcfile="${om-tn.encryption.public-key}/om-tn.gepeq.username.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn.gepeq.username" from="om-tn.gepeq.username.encrypted" override="true"/>
                        <!-- Encrypt GEPEQ DB password -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn.encryption.public-key}"/>
                            <arg value="${om-tn.gepeq.password}"/>
                            <arg value="-o"/>
                            <arg value="om-tn.gepeq.password.txt"/>
                        </java>
                        <loadfile property="om-tn.gepeq.password.encrypted" srcfile="${om-tn.encryption.public-key}/om-tn.gepeq.password.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn.gepeq.password" from="om-tn.gepeq.password.encrypted" override="true"/>
                        <!-- Encrypt om-tn mail configuration username -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn.encryption.public-key}"/>
                            <arg value="${om-tn.mail.username}"/>
                            <arg value="-o"/>
                            <arg value="om-tn.mail.username.txt"/>
                        </java>
                        <loadfile property="om-tn.mail.username.encrypted" srcfile="${om-tn.encryption.public-key}/om-tn.mail.username.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn.mail.username" from="om-tn.mail.username.encrypted" override="true"/>
                        <!-- Encrypt om-tn mail configuration password -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn.encryption.public-key}"/>
                            <arg value="${om-tn.mail.password}"/>
                            <arg value="-o"/>
                            <arg value="om-tn.mail.password.txt"/>
                        </java>
                        <loadfile property="om-tn.mail.password.encrypted" srcfile="${om-tn.encryption.public-key}/om-tn.mail.password.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn.mail.password" from="om-tn.mail.password.encrypted" override="true"/>
                    </then>
                    <else>
                    	<property name="om-tn.encryption.false.constant" value="false"/>
                        <propertycopy name="om-tn.encryption.enabled" from="om-tn.encryption.false.constant" override="true"/>
                        <echo>Encryption for OpenMark Test Navigator (preview environment) it is not possible so it has been disabled...</echo>
                    </else>
                </if>
            </then>
    	</if>
        <if>
            <and> <!-- Check if we need to generate a new salted password for OpenMark Test Navigator for preview enviroment -->
                <equals arg1="${om-tn.encryption.generate-password}" arg2="true"/>
                <not>
                    <equals arg1="${om-tn.encryption.generate-password.done}" arg2="true"/>
                </not>
            </and>
            <then>
                <if>
                    <not>
                        <available file="${om-tn.encryption.output}" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-tn.encryption.output}"/> <!-- Creates the encryption output folder for OpenMark Test Navigator for preview enviroment if needed -->
                    </then>
                </if>
            	<!-- Generates a new symmetric salted password for OpenMark Test Navigator for preview enviroment -->
                <java jar="${encryption.symmetric-encryptor.tool}/${encryption.symmetric-encryptor.tool.name}" fork="true">
                    <arg value="generate-salted-password"/>
                    <arg value="-o"/>
                    <arg value="${om-tn.encryption.output}/om-tn.encryption.password.txt"/>
                </java>
                <loadfile property="om-tn.encryption.password.generated" srcfile="${om-tn.encryption.output}/om-tn.encryption.password.txt">
                    <filterchain>
                        <deletecharacters chars="\r\n"/>
                    </filterchain>
                </loadfile>
                <propertycopy name="om-tn.encryption.password" from="om-tn.encryption.password.generated" override="true"/>
                <property name="om-tn.encryption.generate-password.done.constant" value="true"/>
                <propertycopy name="om-tn.encryption.generate-password.done" from="om-tn.encryption.generate-password.done.constant" override="true"/>
            </then>
        </if>
    </target>
	
	<target description="Deploys OpenMark Test Navigator web application for preview environment (om-tn)" name="om-tn-webapp" depends="om-tn-encryption">
        <!-- Create needed output folders for deploying OpenMark Test Navigator web application for preview environment (om-tn)-->
        <if>
            <not>
                <available file="${om-tn-webapp.output}" type="dir"/>
            </not>
            <then>
                <mkdir dir="${om-tn-webapp.output}"/>
                <mkdir dir="${om-tn-webapp.output}/logs"/>
                <mkdir dir="${om-tn-webapp.output}/questionbank"/>
                <mkdir dir="${om-tn-webapp.output}/testbank"/>
                <mkdir dir="${om-tn-webapp.output}/WEB-INF/security"/>
                <mkdir dir="${om-tn-webapp.output}/WEB-INF/lib"/>
            </then>
        	<else>
                <if>
                    <not>
                        <available file="${om-tn-webapp.output}/logs}" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-tn-webapp.output}/logs"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${om-tn-webapp.output}/questionbank}" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-tn-webapp.output}/questionbank}"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${om-tn-webapp.output}/testbank}" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-tn-webapp.output}/testbank}"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${om-tn-webapp.output}/WEB-INF/security" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-tn-webapp.output}/WEB-INF/security"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${om-tn-webapp.output}/WEB-INF/lib" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-tn-webapp.output}/WEB-INF/lib"/>
                    </then>
                </if>
        	</else>
        </if>
        <!-- Copy files from input OpenMark Test Navigator web application for preview environment (om-tn) to output folder, with some exceptions -->
        <copy todir="${om-tn-webapp.output}">
            <fileset dir="${om-tn-webapp.input}">
                <exclude name="logs/**"/>
                <exclude name="questionbank/**"/>
            	<exclude name="testbank/**"/>
                <exclude name="WEB-INF/security/**"/>
                <exclude name="WEB-INF/lib/**"/>
            	<exclude name="${om-tn.navigator.sample.name}"/>
                <exclude name="${om-tn.navigator.conf.name}"/>
                <exclude name="WEB-INF/${om-tn.server-config.web-inf.conf.name}"/>
                <exclude name="WEB-INF/${om-tn.web.web-inf.conf.name}"/>
            </fileset>
        </copy>
		<!-- Build trusted addresses for om-tn -->
		<var name="om-tn.trustedaddresses.addresses.var" value=""/>
        <for list="${om-tn.trustedaddresses}" param="address">
            <sequential>
            	<var name="om-tn.trustedaddresses.addresses.var" value="${om-tn.trustedaddresses.addresses.var}&lt;address&gt;@{address}&lt;/address&gt;" />
            </sequential>
        </for>
        <property name="om-tn.trustedaddresses.addresses" value="${om-tn.trustedaddresses.addresses.var}"/>
        <!-- Build secure addresses for om-tn -->
		<var name="om-tn.secureaddresses.addresses.var" value=""/>
		<for list="${om-tn.secureaddresses}" param="address">
			<sequential>
				<var name="om-tn.secureaddresses.addresses.var" value="${om-tn.secureaddresses.addresses.var}&lt;address&gt;@{address}&lt;/address&gt;"/>
			</sequential>
		</for>
        <property name="om-tn.secureaddresses.addresses" value="${om-tn.secureaddresses.addresses.var}"/>
        <!-- Build question engines urls for om-tn -->
		<var name="om-tn.questionengines.urls.var" value=""/>
		<for list="${om-tn.questionengines}" param="url">
			<sequential>
				<var name="om-tn.questionengines.urls.var" value="${om-tn.questionengines.urls.var}&lt;url&gt;@{url}&lt;/url&gt;"/>
			</sequential>
		</for>
		<property name="om-tn.questionengines.urls" value="${om-tn.questionengines.urls.var}"/>
        <!-- Build test navigators urls for om-tn -->
		<var name="om-tn.testnavigators.urls.var" value="&lt;url this=&quot;yes&quot;&gt;${om-tn.this-testnavigator}&lt;/url&gt;"/>
		<for list="${om-tn.additional-testnavigators}" param="url">
			<sequential>
				<var name="om-tn.testnavigators.urls.var" value="${om-tn.testnavigators.urls.var}&lt;url&gt;@{url}&lt;/url&gt;"/>
			</sequential>
		</for>
		<property name="om-tn.testnavigators.urls" value="${om-tn.testnavigators.urls.var}"/>
        <!-- Build recipients and carbon copies email addreses for alert mails for om-tn -->
		<var name="om-tn.alertmail.all-to-cc.var" value=""/>
		<for list="${om-tn.alertmail.to}" param="to">
			<sequential>
				<var name="om-tn.alertmail.all-to-cc.var" value="${om-tn.alertmail.all-to-cc.var}&lt;to&gt;@{to}&lt;/to&gt;"/>
			</sequential>
		</for>
        <for list="${om-tn.alertmail.cc}" param="cc">
        	<sequential>
                <var name="om-tn.alertmail.all-to-cc.var" value="${om-tn.alertmail.all-to-cc.var}&lt;cc&gt;@{cc}&lt;/cc&gt;"/>
        	</sequential>
        </for>
		<property name="om-tn.alertmail.all-to-cc" value="${om-tn.alertmail.all-to-cc.var}"/>
		<!-- Build symmetric salted password for om-tn -->
        <if>
            <equals arg1="${om-tn.encryption.password}" arg2=""/>
        	<then>
                <property name="om-tn.gepeq-decryption-password" value="&lt;!&#45;&#45; &lt;gepeq-decryption-password&gt;&lt;/gepeq-decryption-password&gt; &#45;&#45;&gt;"/>
        	</then>
        	<else>
        		<property name="om-tn.gepeq-decryption-password" value="&lt;gepeq-decryption-password&gt;${om-tn.encryption.password}&lt;/gepeq-decryption-password&gt;"/>
        	</else>
        </if>
		<!-- Build authentication session duration for om-tn -->
	    <if>
	    	<equals arg1="${om-tn.auth-session-expiry}" arg2=""/>
	    	<then>
                <property name="om-tn.auth-session-expiry.config" value="&lt;!&#45;&#45; &lt;auth-session-expiry&gt;15m&lt;/auth-session-expiry&gt; &#45;&#45;&gt;"/>
	    	</then>
	    	<else>
	    		<property name="om-tn.auth-session-expiry.config" value="&lt;auth-session-expiry&gt;${om-tn.auth-session-expiry}&lt;/auth-session-expiry&gt;"/>
	    	</else>
		</if>
		<!-- Build mail configuration for Gmail accounts for om-tn -->
		<if>
			<equals arg1="${om-tn.mail.config}" arg2="Gmail" casesensitive="false"/>
			<then>
				<property name="om-tn.mail.config.gmail" value="&lt;config&gt;Gmail&lt;/config&gt;"/>
			</then>
			<else>
                <property name="om-tn.mail.config.gmail" value="&lt;!&#45;&#45; &lt;config&gt;Gmail&lt;/config&gt; &#45;&#45;&gt;"/>
			</else>
		</if>
		<!-- Build mail configuration for Yahoo! Mail accounts for om-tn -->
        <if>
            <equals arg1="${om-tn.mail.config}" arg2="Yahoo! Mail" casesensitive="false"/>
            <then>
                <property name="om-tn.mail.config.yahoo-mail" value="&lt;config&gt;Yahoo! Mail&lt;/config&gt;"/>
            </then>
            <else>
                <property name="om-tn.mail.config.yahoo-mail" value="&lt;!&#45;&#45; &lt;config&gt;Yahoo! Mail&lt;/config&gt; &#45;&#45;&gt;"/>
            </else>
        </if>
		<!-- Build mail configuration for Hotmail accounts for om-tn -->
        <if>
            <equals arg1="${om-tn.mail.config}" arg2="Hotmail" casesensitive="false"/>
            <then>
                <property name="om-tn.mail.config.hotmail" value="&lt;config&gt;Hotmail&lt;/config&gt;"/>
            </then>
            <else>
                <property name="om-tn.mail.config.hotmail" value="&lt;!&#45;&#45; &lt;config&gt;Hotmail&lt;/config&gt; &#45;&#45;&gt;"/>
            </else>
        </if>
		<!-- Build mail username for om-tn -->
		<if>
			<equals arg1="${om-tn.mail.username}" arg2=""/>
			<then>
				<property name="om-tn.mail.username.config" value="&lt;!&#45;&#45; &lt;username&gt;&lt;/username&gt; &#45;&#45;&gt;"/>
			</then>
			<else>
				<property name="om-tn.mail.username.config" value="&lt;username&gt;${om-tn.mail.username}&lt;/username&gt;"/>
			</else>
		</if>
		<!-- Build mail password for om-tn -->
        <if>
            <equals arg1="${om-tn.mail.password}" arg2=""/>
            <then>
                <property name="om-tn.mail.password.config" value="&lt;!&#45;&#45; &lt;password&gt;&lt;/password&gt; &#45;&#45;&gt;"/>
            </then>
            <else>
                <property name="om-tn.mail.password.config" value="&lt;password&gt;${om-tn.mail.password}&lt;/password&gt;"/>
            </else>
        </if>
		<!-- Build mail host name for om-tn -->
		<if>
			<equals arg1="${om-tn.mail.hostname}" arg2=""/>
			<then>
				<if>
					<equals arg1="${om-tn.mail.config}" arg2="Gmail" casesensitive="false"/>
					<then>
                        <property name="om-tn.mail.hostname.config" value="&lt;!&#45;&#45; &lt;hostname&gt;smtp.gmail.com&lt;/hostname&gt; &#45;&#45;&gt;"/>
				    </then>
					<elseif>
						<equals arg1="${om-tn.mail.config}" arg2="Yahoo! Mail" casesensitive="false"/>
						<then>
	                        <property name="om-tn.mail.hostname.config" value="&lt;!&#45;&#45; &lt;hostname&gt;smtp.mail.yahoo.com&lt;/hostname&gt; &#45;&#45;&gt;"/>
						</then>
					</elseif>
                    <elseif>
                    	<equals arg1="${om-tn.mail.config}" arg2="Hotmail" casesensitive="false"/>
                        <then>
                            <property name="om-tn.mail.hostname.config" value="&lt;!&#45;&#45; &lt;hostname&gt;smtp.live.com&lt;/hostname&gt; &#45;&#45;&gt;"/>
                        </then>
                    </elseif>
					<else>
						<property name="om-tn.mail.hostname.config" value="&lt;!&#45;&#45; &lt;hostname&gt;&lt;/hostname&gt; &#45;&#45;&gt;"/>
					</else>
				</if>
			</then>
			<else>
				<property name="om-tn.mail.hostname.config" value="&lt;hostname&gt;${om-tn.mail.hostname}&lt;/hostname&gt;"/>
			</else>
		</if>
		<!-- Build mail port for om-tn -->
		<if>
			<equals arg1="${om-tn.mail.port}" arg2=""/>
			<then>
				<if>
					<equals arg1="${om-tn.mail.config}" arg2="Hotmail" casesensitive="false"/>
					<then>
		                <property name="om-tn.mail.port.config" value="&lt;!&#45;&#45; &lt;port&gt;587&lt;/port&gt; &#45;&#45;&gt;"/>
					</then>
					<else>
                        <property name="om-tn.mail.port.config" value="&lt;!&#45;&#45; &lt;port&gt;25&lt;/port&gt; &#45;&#45;&gt;"/>
					</else>
				</if>
			</then>
			<else>
				<property name="om-tn.mail.port.config" value="&lt;port&gt;${om-tn.mail.port}&lt;/port&gt;"/>
			</else>
		</if>
		<!-- Build boolean flag for enabling (true) or disabling (false) SSL for mail for om-tn -->
		<if>
			<equals arg1="${om-tn.mail.ssl}" arg2=""/>
			<then>
                <if>
                    <equals arg1="${om-tn.mail.config}" arg2="Gmail" casesensitive="false"/>
                    <then>
                        <property name="om-tn.mail.ssl.config" value="&lt;!&#45;&#45; &lt;ssl&gt;true&lt;/ssl&gt; &#45;&#45;&gt;"/>
                    </then>
                	<elseif>
                		<equals arg1="${om-tn.mail.config}" arg2="Yahoo! Mail" casesensitive="false"/>
                		<then>
                            <property name="om-tn.mail.ssl.config" value="&lt;!&#45;&#45; &lt;ssl&gt;true&lt;/ssl&gt; &#45;&#45;&gt;"/>
                		</then>
                	</elseif>
                    <else>
                        <property name="om-tn.mail.ssl.config" value="&lt;!&#45;&#45; &lt;ssl&gt;false&lt;/ssl&gt; &#45;&#45;&gt;"/>
                    </else>
                </if>
			</then>
			<else>
				<property name="om-tn.mail.ssl.config" value="&lt;ssl&gt;${om-tn.mail.ssl}&lt;/ssl&gt;"/>
			</else>
		</if>
		<!-- Build boolean flag for starting (true) or not (false) TLS for mail for om-tn -->
		<if>
            <equals arg1="${om-tn.mail.start-tls}" arg2=""/>
			<then>
				<if>
                    <equals arg1="${om-tn.mail.config}" arg2="Hotmail" casesensitive="false"/>
                    <then>
                        <property name="om-tn.mail.start-tls.config" value="&lt;!&#45;&#45; &lt;start-tls&gt;true&lt;/start-tls&gt; &#45;&#45;&gt;"/>
                    </then>
                    <else>
                        <property name="om-tn.mail.start-tls.config" value="&lt;!&#45;&#45; &lt;start-tls&gt;false&lt;/start-tls&gt; &#45;&#45;&gt;"/>
                    </else>
				</if>
			</then>
			<else>
				<property name="om-tn.mail.start-tls.config" value="&lt;start-tls&gt;${om-tn.mail.start-tls}&lt;/start-tls&gt;"/>
			</else>
		</if>
		<!-- Build boolean flag for enabling (true) or disabling (false) mail debug mode for om-tn -->
		<if>
			<equals arg1="${om-tn.mail.debug}" arg2=""/>
			<then>
                <property name="om-tn.mail.debug.config" value="&lt;!&#45;&#45; &lt;debug&gt;true&lt;/debug&gt; &#45;&#45;&gt;"/>
			</then>
			<else>
				<property name="om-tn.mail.debug.config" value="&lt;debug&gt;${om-tn.mail.debug}&lt;/debug&gt;"/>
			</else>
		</if>
        <!-- Generates a new navigator.xml file from template replacing some values with the appropiated values and copy it to deploy output folder of OpenMark Test Navigator web application for preview environment (om-tn) -->
        <copy file="${om-tn.navigator.conf}/${om-tn.navigator.conf.name}" tofile="${om-tn-webapp.output}/${om-tn.navigator.conf.name}">
            <filterchain>
                <replacetokens>
                    <token key="om-tn.navigator-db-plugin" value="${om-tn.navigator-db-plugin}"/>
                    <token key="om-tn.server" value="${om-tn.server}"/>
                    <token key="om-tn.dbname" value="${om-tn.dbname}"/>
                    <token key="om-tn.prefix" value="${om-tn.prefix}"/>
                    <token key="om-tn.username" value="${om-tn.username}"/>
                    <token key="om-tn.password" value="${om-tn.password}"/>
                    <token key="om-tn.trustedaddresses.addresses" value="${om-tn.trustedaddresses.addresses}"/>
                	<token key="om-tn.secureaddresses.addresses" value="${om-tn.secureaddresses.addresses}"/>
                	<token key="om-tn.navigator-auth-plugin" value="${om-tn.navigator-auth-plugin}"/>
                	<token key="om-tn.questionengines.urls" value="${om-tn.questionengines.urls}"/>
                	<token key="om-tn.testnavigators.urls" value="${om-tn.testnavigators.urls}"/>
                	<token key="om-tn.alertmail.from" value="${om-tn.alertmail.from}"/>
                    <token key="om-tn.alertmail.all-to-cc" value="${om-tn.alertmail.all-to-cc}"/>
                	<token key="gepeq.server" value="${om-tn.gepeq.server}"/>
                    <token key="gepeq.dbname" value="${om-tn.gepeq.dbname}"/>
                    <token key="gepeq.username" value="${om-tn.gepeq.username}"/>
                    <token key="gepeq.password" value="${om-tn.gepeq.password}"/>
                	<token key="om-tn.gepeq-decryption-password" value="${om-tn.gepeq-decryption-password}"/>
                	<token key="om-tn.auth-session-expiry.config" value="${om-tn.auth-session-expiry.config}"/>
                    <token key="om-tn.mail.config.gmail" value="${om-tn.mail.config.gmail}"/>
                    <token key="om-tn.mail.config.yahoo-mail" value="${om-tn.mail.config.yahoo-mail}"/>
                	<token key="om-tn.mail.config.hotmail" value="${om-tn.mail.config.hotmail}"/>
                	<token key="om-tn.mail.username.config" value="${om-tn.mail.username.config}"/>
                    <token key="om-tn.mail.password.config" value="${om-tn.mail.password.config}"/>
                	<token key="om-tn.mail.hostname.config" value="${om-tn.mail.hostname.config}"/>
                	<token key="om-tn.mail.port.config" value="${om-tn.mail.port.config}"/>
                	<token key="om-tn.mail.ssl.config" value="${om-tn.mail.ssl.config}"/>
                	<token key="om-tn.mail.start-tls.config" value="${om-tn.mail.start-tls.config}"/>
                	<token key="om-tn.mail.debug.config" value="${om-tn.mail.debug.config}"/>
                </replacetokens>
            </filterchain>
        </copy>
        <!-- Copy server-config.wsdd from template (no replacements needed) to WEB-INF folder within deploy output folder of OpenMark Test Navigator web application for preview environment (om-tn) -->
        <copy file="${om-tn.server-config.web-inf.conf}/${om-tn.server-config.web-inf.conf.name}" tofile="${om-tn-webapp.output}/WEB-INF/${om-tn.server-config.web-inf.conf.name}"/>
        <!-- Generates a new web.xml file from template replacing some values with the appropiated values and copy it to WEB-INF folder within deploy output folder of OpenMark Test Navigator web application for preview environment (om-tn) -->
		<copy file="${om-tn.web.web-inf.conf}/${om-tn.web.web-inf.conf.name}" tofile="${om-tn-webapp.output}/WEB-INF/${om-tn.web.web-inf.conf.name}">
            <filterchain>
                <replacetokens>
                    <token key="om-tn.navigator-servlet" value="${om-tn.navigator-servlet}"/>
                </replacetokens>
            </filterchain>
		</copy>
        <!-- Copy needed libraries to WEB-INF/lib folder within deploy output folder of OpenMark Test Navigator web application for preview enviroment (om-tn) -->
        <copy todir="${om-tn-webapp.output}/WEB-INF/lib">
            <fileset file="${om-tn.lib}/${om-tn.lib.name}"/>
            <fileset file="${om.jaf.lib}/${om.jaf.lib.name}"/>
            <fileset file="${om.apple-java-ext.lib}/${om.apple-java-ext.lib.name}"/>
            <fileset file="${om.axis.lib}/${om.axis.lib.name}"/>
            <fileset file="${om.batik-anim.lib}/${om.batik-anim.lib.name}"/>
            <fileset file="${om.batik-awt-util.lib}/${om.batik-awt-util.lib.name}"/>
            <fileset file="${om.batik-css.lib}/${om.batik-css.lib.name}"/>
            <fileset file="${om.batik-dom.lib}/${om.batik-dom.lib.name}"/>
            <fileset file="${om.batik-ext.lib}/${om.batik-ext.lib.name}"/>
            <fileset file="${om.batik-parser.lib}/${om.batik-parser.lib.name}"/>
            <fileset file="${om.batik-svg-dom.lib}/${om.batik-svg-dom.lib.name}"/>
            <fileset file="${om.batik-util.lib}/${om.batik-util.lib.name}"/>
            <fileset file="${om.batik-xml.lib}/${om.batik-xml.lib.name}"/>
            <fileset file="${om.commons-cli.lib}/${om.commons-cli.lib.name}"/>
            <fileset file="${om.commons-discovery.lib}/${om.commons-discovery.lib.name}"/>
            <fileset file="${om.commons-io.lib}/${om.commons-io.lib.name}"/>
            <fileset file="${om.commons-lang.lib}/${om.commons-lang.lib.name}"/>
            <fileset file="${om.commons-logging.lib}/${om.commons-logging.lib.name}"/>
        	<fileset file="${om.encryption.lib}/${om.encryption.lib.name}"/>
            <fileset file="${om.jaxrpc.lib}/${om.jaxrpc.lib.name}"/>
            <fileset file="${om.jazzy.lib}/${om.jazzy.lib.name}"/>
            <fileset file="${om.jeuclid-cli.lib}/${om.jeuclid-cli.lib.name}"/>
            <fileset file="${om.jeuclid-core.lib}/${om.jeuclid-core.lib.name}"/>
            <fileset file="${om.jeuclid-mathviewer.lib}/${om.jeuclid-mathviewer.lib.name}"/>
            <fileset file="${om.jeuclid-minimal.lib}/${om.jeuclid-minimal.lib.name}"/>
            <fileset file="${om.mail.lib}/${om.mail.lib.name}"/>
        	<fileset file="${om.generic.db.lib}/${om.generic.db.lib.name}"/>
            <fileset file="${om.saaj.lib}/${om.saaj.lib.name}"/>
            <fileset file="${om.wsdl4j.lib}/${om.wsdl4j.lib.name}"/>
            <fileset file="${om.xml-apis.lib}/${om.xml-apis.lib.name}"/>
            <fileset file="${om.xml-apis-ext.lib}/${om.xml-apis-ext.lib.name}"/>
            <fileset file="${om.xmlgraphics.lib}/${om.xmlgraphics.lib.name}"/>
        </copy>
        <!-- Copy questions samples jars to questionbank folder of deployed OpenMark Test Navigator web application for preview environment (om-tn) -->
        <for list="${om-tn.navigator.questionbank.jars}" param="jar">
        	<sequential>
        		<propertycopy name="jar-to-copy" from="om-tn.navigator.questionbank.@{jar}-jar.conf" override="true"/>
                <propertycopy name="jar-to-copy.name" from="om-tn.navigator.questionbank.@{jar}-jar.conf.name" override="true"/>
        		<copy file="${jar-to-copy}/${jar-to-copy.name}" todir="${om-tn-webapp.output}/questionbank" />
        	</sequential>
		</for>
        <!-- Copy questions samples deploy files to testbank folder of deployed OpenMark Test Navigator web application for preview environment (om-tn) -->
		<for list="${om-tn.navigator.testbank.questions}" param="question">
			<sequential>
				<propertycopy name="question.deploy" from="om-tn.navigator.testbank.@{question}-question.deploy.conf" override="true"/>
                <propertycopy name="question.deploy.name" from="om-tn.navigator.testbank.@{question}-question.deploy.conf.name" override="true"/>
				<copy file="${question.deploy}/${question.deploy.name}" todir="${om-tn-webapp.output}/testbank"/>
			</sequential>
		</for>
        <!-- Copy tests samples test/deploy files to testbank folder of deployed OpenMark Test Navigator web application for preview environment (om-tn) -->
		<for list="${om-tn.navigator.testbank.tests}" param="test">
			<sequential>
                <propertycopy name="test.test" from="om-tn.navigator.testbank.@{test}-test.test.conf" override="true"/>
                <propertycopy name="test.test.name" from="om-tn.navigator.testbank.@{test}-test.test.conf.name" override="true"/>
				<propertycopy name="test.deploy" from="om-tn.navigator.testbank.@{test}-test.deploy.conf" override="true"/>
				<propertycopy name="test.deploy.name" from="om-tn.navigator.testbank.@{test}-test.deploy.conf.name" override="true"/>
				<copy file="${test.test}/${test.test.name}" todir="${om-tn-webapp.output}/testbank"/>
                <copy file="${test.deploy}/${test.deploy.name}" todir="${om-tn-webapp.output}/testbank"/>
			</sequential>
		</for>
        <if>
            <equals arg1="${om-tn.encryption.enabled}" arg2="true"/>
            <then>
                <!-- If om-tn encryption is enabled we need to deploy private key to WEB-INF/security folder within deploy output folder of OpenMark Test Navigator web application for preview environment (om-tn) -->
                <copy file="${om-tn.encryption.private-key}/${om-tn.encryption.private-key.name}" todir="${om-tn-webapp.output}/WEB-INF/security"/>
                <chmod file="${om-tn-webapp.output}/WEB-INF/security/${om-tn.encryption.private-key.name}" perm="600"/>
            </then>
        </if>
		<if>
			<and>
				<not>
					<equals arg1="${om-tn.questionbank.gepeq-keep-from.folder}" arg2=""/>
				</not>
				<available file="${build.keep}/om-tn/questionbank" type="dir"/>
			</and>
			<then>
				<!-- If needed copy some questions jars generated with OpenMark Authoring Tool to questionbank folder of deployed OpenMark Test Navigator web application for preview environment (om-tn) -->
				<copy todir="${om-tn-webapp.output}/questionbank">
                    <fileset dir="${build.keep}/om-tn/questionbank"/>
				</copy>
			</then>
		</if>
        <if>
            <and>
                <not>
                    <equals arg1="${om-tn.testbank.gepeq-keep-from.folder}" arg2=""/>
                </not>
                <available file="${build.keep}/om-tn/testbank" type="dir"/>
            </and>
            <then>
                <!-- If needed copy some questions/tests deploy/test xml files generated with OpenMark Authoring Tool to testbank folder of deployed OpenMark Test Navigator web application for preview environment (om-tn) -->
                <copy todir="${om-tn-webapp.output}/testbank">
                    <fileset dir="${build.keep}/om-tn/testbank"/>
                </copy>
            </then>
        </if>
	    <if>
	    	<and>
	            <not>
	                <equals arg1="${om-tn.logs.keep-from.folder}" arg2=""/>
	            </not>
	    		<available file="${build.keep}/om-tn/logs" type="dir"/>
	    	</and>
	        <then>
                <!-- If needed copy some logs to logs folder of deployed OpenMark Test Navigator web application for preview environment (om-tn) -->
	            <copy todir="${om-tn-webapp.output}/logs">
	                <fileset dir="${build.keep}/om-tn/logs"/>
	            </copy>
	        </then>
	    </if>
	</target>
	
    <target description="Deploys OpenMark Question Engine web application for publication environment (om-qe-pro)" depends="save-keep" name="om-qe-pro-webapp">
    	<!-- Create needed output folders for deploying OpenMark Question Engine web application for publication environment (om-qe-pro)-->
        <if>
            <not>
                <available file="${om-qe-pro-webapp.output}" type="dir"/>
            </not>
            <then>
                <mkdir dir="${om-qe-pro-webapp.output}"/>
                <mkdir dir="${om-qe-pro-webapp.output}/questioncache"/>
                <mkdir dir="${om-qe-pro-webapp.output}/WEB-INF/attachments"/>
                <mkdir dir="${om-qe-pro-webapp.output}/WEB-INF/lib"/>
            </then>
        	<else>
                <if>
                    <not>
                        <available file="${om-qe-pro-webapp.output}/questioncache" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-qe-pro-webapp.output}/questioncache"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${om-qe-pro-webapp.output}/WEB-INF/attachments" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-qe-pro-webapp.output}/WEB-INF/attachments"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${om-qe-pro-webapp.output}/WEB-INF/lib" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-qe-pro-webapp.output}/WEB-INF/lib"/>
                    </then>
                </if>
        	</else>
        </if>
        <!-- Copy files from input OpenMark Question Engine web application for publication environment (om-qe-pro) to output folder, with some exceptions -->
        <copy todir="${om-qe-pro-webapp.output}">
            <fileset dir="${om-qe-pro-webapp.input}">
                <exclude name="questioncache/**"/>
                <exclude name="WEB-INF/attachments/**"/>
                <exclude name="WEB-INF/lib/**"/>
                <exclude name="WEB-INF/${om-qe-pro.qengine.sample.web-inf.name}"/>
                <exclude name="WEB-INF/${om-qe-pro.server-config.web-inf.conf.name}"/>
                <exclude name="WEB-INF/${om-qe-pro.web.web-inf.conf.name}"/>
            </fileset>
        </copy>
        <!-- Generates a new server-config.wsdd file from template replacing some values with the appropiated values and copy it to WEB-INF folder within deploy output folder of OpenMark Question Engine web application for publication environment (om-qe-pro) -->
        <copy file="${om-qe-pro.server-config.web-inf.conf}/${om-qe-pro.server-config.web-inf.conf.name}" tofile="${om-qe-pro-webapp.output}/WEB-INF/${om-qe-pro.server-config.web-inf.conf.name}">
            <filterchain>
                <replacetokens>
                    <token key="om-qe-pro.om-service" value="${om-qe-pro.om-service}"/>
                </replacetokens>
            </filterchain>
        </copy>
        <!-- Copy web.xml from template (no replacements needed) to WEB-INF folder within deploy output folder of OpenMark Question Engine web application for publication environment (om-qe-pro) -->
        <copy file="${om-qe-pro.web.web-inf.conf}/${om-qe-pro.web.web-inf.conf.name}" tofile="${om-qe-pro-webapp.output}/WEB-INF/${om-qe-pro.web.web-inf.conf.name}"/>
        <!-- Copy needed libraries to WEB-INF/lib folder within deploy output folder of OpenMark Question Engine web application for publciation enviroment (om-qe-pro) -->
        <copy todir="${om-qe-pro-webapp.output}/WEB-INF/lib">
            <fileset file="${om-qe-pro.lib}/${om-qe-pro.lib.name}"/>
            <fileset file="${om.axis.lib}/${om.axis.lib.name}"/>
            <fileset file="${om.axis-ant.lib}/${om.axis-ant.lib.name}"/>
            <fileset file="${om.apple-java-ext.lib}/${om.apple-java-ext.lib.name}"/>
            <fileset file="${om.batik-anim.lib}/${om.batik-anim.lib.name}"/>
            <fileset file="${om.batik-awt-util.lib}/${om.batik-awt-util.lib.name}"/>
            <fileset file="${om.batik-css.lib}/${om.batik-css.lib.name}"/>
            <fileset file="${om.batik-dom.lib}/${om.batik-dom.lib.name}"/>
            <fileset file="${om.batik-ext.lib}/${om.batik-ext.lib.name}"/>
            <fileset file="${om.batik-parser.lib}/${om.batik-parser.lib.name}"/>
            <fileset file="${om.batik-svg-dom.lib}/${om.batik-svg-dom.lib.name}"/>
            <fileset file="${om.batik-util.lib}/${om.batik-util.lib.name}"/>
            <fileset file="${om.batik-xml.lib}/${om.batik-xml.lib.name}"/>
            <fileset file="${om.commons-cli.lib}/${om.commons-cli.lib.name}"/>
            <fileset file="${om.commons-discovery.lib}/${om.commons-discovery.lib.name}"/>
            <fileset file="${om.commons-io.lib}/${om.commons-io.lib.name}"/>
            <fileset file="${om.commons-lang.lib}/${om.commons-lang.lib.name}"/>
            <fileset file="${om.commons-logging.lib}/${om.commons-logging.lib.name}"/>
            <fileset file="${om.jaxrpc.lib}/${om.jaxrpc.lib.name}"/>
            <fileset file="${om.jazzy.lib}/${om.jazzy.lib.name}"/>
            <fileset file="${om.jeuclid-cli.lib}/${om.jeuclid-cli.lib.name}"/>
            <fileset file="${om.jeuclid-core.lib}/${om.jeuclid-core.lib.name}"/>
            <fileset file="${om.jeuclid-mathviewer.lib}/${om.jeuclid-mathviewer.lib.name}"/>
            <fileset file="${om.jeuclid-minimal.lib}/${om.jeuclid-minimal.lib.name}"/>
            <fileset file="${om.jeuclid-mathviewer.lib}/${om.jeuclid-mathviewer.lib.name}"/>
            <fileset file="${om.log4j.lib}/${om.log4j.lib.name}"/>
            <fileset file="${om.saaj.lib}/${om.saaj.lib.name}"/>
            <fileset file="${om.wsdl4j.lib}/${om.wsdl4j.lib.name}"/>
            <fileset file="${om.xml-apis.lib}/${om.xml-apis.lib.name}"/>
            <fileset file="${om.xml-apis-ext.lib}/${om.xml-apis-ext.lib.name}"/>
            <fileset file="${om.xmlgraphics.lib}/${om.xmlgraphics.lib.name}"/>
        </copy>
    </target>
	
    <target description="Performs encryption needed before deploying OpenMark Test Navigator web application for publication environment (om-tn-pro)" depends="save-keep" name="om-tn-pro-encryption">
        <if>
            <equals arg1="${om-tn-pro.encryption.enabled}" arg2="true"/> <!-- Check that om-tn-pro encryption is enabled -->
            <then>
                <if>
                    <not>
                        <available file="${om-tn-pro.encryption.output}" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-tn-pro.encryption.output}"/> <!-- Create om-tn-pro encryption output folder if needed -->
                    </then>
                </if>
                <if>
                    <equals arg1="${om-tn-pro.encryption.generate-keypair}" arg2="true"/> <!-- Check if we need to generate a new encryption key pair for GEPEQ -->
                    <then>
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                          <arg value="savekeypair_enc_priv:${om-tn-pro.encryption.output}"/>
                        </java>
                        <!-- We assign public and private key properties for om-tn-pro to reference the generated key pair -->
                        <propertycopy name="om-tn-pro.encryption.public-key" from="om-tn-pro.encryption.output" override="true"/>
                        <property name="om-tn-pro.encryption.public-key.name.constant" value="public.key"/>
                        <propertycopy name="om-tn-pro.encryption.public-key.name" from="om-tn-pro.encryption.public-key.name.constant" override="true"/>
                        <propertycopy name="om-tn-pro.encryption.private-key" from="om-tn-pro.encryption.output" override="true"/>
                        <property name="om-tn-pro.encryption.private-key.name.constant" value="private.key"/>
                        <propertycopy name="om-tn-pro.encryption.private-key.name" from="om-tn-pro.encryption.private-key.name.constant" override="true"/>
                    </then>
                    <elseif>
                        <equals arg1="${om-tn-pro.encryption.use-gepeq-keypair}" arg2="true"/>
                        <then>
                        	<!-- If needed we assign public and private key properties for om-tn-pro to reference GEPEQ key pair -->
                            <propertycopy name="om-tn-pro.encryption.public-key" from="gepeq.encryption.public-key" override="true"/>
                            <propertycopy name="om-tn-pro.encryption.public-key.name" from="gepeq.encryption.public-key.name" override="true"/>
                            <propertycopy name="om-tn-pro.encryption.private-key" from="gepeq.encryption.private-key" override="true"/>
                            <propertycopy name="om-tn-pro.encryption.private-key.name" from="gepeq.encryption.private-key.name" override="true"/>
                        </then>
                    </elseif>
                </if>
            	<if>
                    <available file="${om-tn-pro.encryption.public-key}/${om-tn-pro.encryption.public-key.name}"/> <!-- Check that public key file exist -->
            		<then>
            			<!-- Encrypt om-tn-pro DB server -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn-pro.encryption.public-key}"/>
                            <arg value="${om-tn-pro.server}"/>
                            <arg value="-o"/>
                            <arg value="om-tn-pro.server.txt"/>
                        </java>
                        <loadfile property="om-tn-pro.server.encrypted" srcfile="${om-tn-pro.encryption.public-key}/om-tn-pro.server.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn-pro.server" from="om-tn-pro.server.encrypted" override="true"/>
                        <!-- Encrypt om-tn-pro DB name -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn-pro.encryption.public-key}"/>
                            <arg value="${om-tn-pro.dbname}"/>
                            <arg value="-o"/>
                            <arg value="om-tn-pro.dbname.txt"/>
                        </java>
                        <loadfile property="om-tn-pro.dbname.encrypted" srcfile="${om-tn-pro.encryption.public-key}/om-tn-pro.dbname.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn-pro.dbname" from="om-tn-pro.dbname.encrypted" override="true"/>
                        <!-- Encrypt om-tn-pro DB username -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn-pro.encryption.public-key}"/>
                            <arg value="${om-tn-pro.username}"/>
                            <arg value="-o"/>
                            <arg value="om-tn-pro.username.txt"/>
                        </java>
                        <loadfile property="om-tn-pro.username.encrypted" srcfile="${om-tn-pro.encryption.public-key}/om-tn-pro.username.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn-pro.username" from="om-tn-pro.username.encrypted" override="true"/>
                        <!-- Encrypt om-tn-pro DB password -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn-pro.encryption.public-key}"/>
                            <arg value="${om-tn-pro.password}"/>
                            <arg value="-o"/>
                            <arg value="om-tn-pro.password.txt"/>
                        </java>
                        <loadfile property="om-tn-pro.password.encrypted" srcfile="${om-tn-pro.encryption.public-key}/om-tn-pro.password.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn-pro.password" from="om-tn-pro.password.encrypted" override="true"/>
                        <!-- Encrypt GEPEQ DB server -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn-pro.encryption.public-key}"/>
                            <arg value="${om-tn-pro.gepeq.server}"/>
                            <arg value="-o"/>
                            <arg value="om-tn-pro.gepeq.server.txt"/>
                        </java>
                        <loadfile property="om-tn-pro.gepeq.server.encrypted" srcfile="${om-tn-pro.encryption.public-key}/om-tn-pro.gepeq.server.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn-pro.gepeq.server" from="om-tn-pro.gepeq.server.encrypted" override="true"/>
                        <!-- Encrypt GEPEQ DB name -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn-pro.encryption.public-key}"/>
                            <arg value="${om-tn-pro.gepeq.dbname}"/>
                            <arg value="-o"/>
                            <arg value="om-tn-pro.gepeq.dbname.txt"/>
                        </java>
                        <loadfile property="om-tn-pro.gepeq.dbname.encrypted" srcfile="${om-tn-pro.encryption.public-key}/om-tn-pro.gepeq.dbname.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn-pro.gepeq.dbname" from="om-tn-pro.gepeq.dbname.encrypted" override="true"/>
                        <!-- Encrypt GEPEQ DB username -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn-pro.encryption.public-key}"/>
                            <arg value="${om-tn-pro.gepeq.username}"/>
                            <arg value="-o"/>
                            <arg value="om-tn-pro.gepeq.username.txt"/>
                        </java>
                        <loadfile property="om-tn-pro.gepeq.username.encrypted" srcfile="${om-tn-pro.encryption.public-key}/om-tn-pro.gepeq.username.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn-pro.gepeq.username" from="om-tn-pro.gepeq.username.encrypted" override="true"/>
                        <!-- Encrypt GEPEQ DB password -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn-pro.encryption.public-key}"/>
                            <arg value="${om-tn-pro.gepeq.password}"/>
                            <arg value="-o"/>
                            <arg value="om-tn-pro.gepeq.password.txt"/>
                        </java>
                        <loadfile property="om-tn-pro.gepeq.password.encrypted" srcfile="${om-tn-pro.encryption.public-key}/om-tn-pro.gepeq.password.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn-pro.gepeq.password" from="om-tn-pro.gepeq.password.encrypted" override="true"/>
            			<!-- Encrypt om-tn-pro mail configuration username -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn-pro.encryption.public-key}"/>
                            <arg value="${om-tn-pro.mail.username}"/>
                            <arg value="-o"/>
                            <arg value="om-tn-pro.mail.username.txt"/>
                        </java>
                        <loadfile property="om-tn-pro.mail.username.encrypted" srcfile="${om-tn-pro.encryption.public-key}/om-tn-pro.mail.username.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn-pro.mail.username" from="om-tn-pro.mail.username.encrypted" override="true"/>
                        <!-- Encrypt om-tn-pro mail configuration password -->
                        <java jar="${encryption.asymmetric-encryptor.tool}/${encryption.asymmetric-encryptor.tool.name}" fork="true">
                            <arg value="encrypt:${om-tn-pro.encryption.public-key}"/>
                            <arg value="${om-tn-pro.mail.password}"/>
                            <arg value="-o"/>
                            <arg value="om-tn-pro.mail.password.txt"/>
                        </java>
                        <loadfile property="om-tn-pro.mail.password.encrypted" srcfile="${om-tn-pro.encryption.public-key}/om-tn-pro.mail.password.txt">
                            <filterchain>
                                <deletecharacters chars="\r\n"/>
                            </filterchain>
                        </loadfile>
                        <propertycopy name="om-tn-pro.mail.password" from="om-tn-pro.mail.password.encrypted" override="true"/>
            		</then>
                    <else>
                    	<property name="om-tn-pro.encryption.false.constant" value="false"/>
                        <propertycopy name="om-tn-pro.encryption.enabled" from="om-tn-pro.encryption.false.constant" override="true"/>
                        <echo>Encryption for OpenMark Test Navigator (publication environment) it is not possible so it has been disabled...</echo>
                    </else>
            	</if>
            </then>
        </if>
        <if>
            <and> <!-- Check if we need to generate a new salted password for OpenMark Test Navigator for publication enviroment -->
                <equals arg1="${om-tn-pro.encryption.generate-password}" arg2="true"/>
                <not>
                    <equals arg1="${om-tn-pro.encryption.generate-password.done}" arg2="true"/>
                </not>
            </and>
            <then>
                <if>
                    <not>
                        <available file="${om-tn-pro.encryption.output}" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-tn-pro.encryption.output}"/> <!-- Creates the encryption output folder for OpenMark Test Navigator for publication enviroment if needed -->
                    </then>
                </if>
            	<!-- Generates a new symmetric salted password for OpenMark Test Navigator for publication enviroment -->
                <java jar="${encryption.symmetric-encryptor.tool}/${encryption.symmetric-encryptor.tool.name}" fork="true">
                    <arg value="generate-salted-password"/>
                    <arg value="-o"/>
                    <arg value="${om-tn-pro.encryption.output}/om-tn-pro.encryption.password.txt"/>
                </java>
                <loadfile property="om-tn-pro.encryption.password.generated" srcfile="${om-tn-pro.encryption.output}/om-tn-pro.encryption.password.txt">
                    <filterchain>
                        <deletecharacters chars="\r\n"/>
                    </filterchain>
                </loadfile>
                <propertycopy name="om-tn-pro.encryption.password" from="om-tn-pro.encryption.password.generated" override="true"/>
                <property name="om-tn-pro.encryption.generate-password.done.constant" value="true"/>
                <propertycopy name="om-tn-pro.encryption.generate-password.done" from="om-tn-pro.encryption.generate-password.done.constant" override="true"/>
            </then>
        </if>
    </target>
    
    <target description="Deploys OpenMark Test Navigator web application for publication environment (om-tn-pro)" name="om-tn-pro-webapp" depends="om-tn-pro-encryption">
        <!-- Create needed output folders for deploying OpenMark Test Navigator web application for publication environment (om-tn-pro)-->
        <if>
            <not>
                <available file="${om-tn-pro-webapp.output}" type="dir"/>
            </not>
            <then>
                <mkdir dir="${om-tn-pro-webapp.output}"/>
                <mkdir dir="${om-tn-pro-webapp.output}/logs"/>
                <mkdir dir="${om-tn-pro-webapp.output}/questionbank"/>
                <mkdir dir="${om-tn-pro-webapp.output}/testbank"/>
                <mkdir dir="${om-tn-pro-webapp.output}/WEB-INF/security"/>
                <mkdir dir="${om-tn-pro-webapp.output}/WEB-INF/lib"/>
            </then>
        	<else>
                <if>
                    <not>
                        <available file="${om-tn-pro-webapp.output}/logs" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-tn-pro-webapp.output}/logs"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${om-tn-pro-webapp.output}/questionbank" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-tn-pro-webapp.output}/questionbank"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${om-tn-pro-webapp.output}/testbank" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-tn-pro-webapp.output}/testbank"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${om-tn-pro-webapp.output}/WEB-INF/security" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-tn-pro-webapp.output}/WEB-INF/security"/>
                    </then>
                </if>
                <if>
                    <not>
                        <available file="${om-tn-pro-webapp.output}/WEB-INF/lib" type="dir"/>
                    </not>
                    <then>
                        <mkdir dir="${om-tn-pro-webapp.output}/WEB-INF/lib"/>
                    </then>
                </if>
        	</else>
        </if>
        <!-- Copy files from input OpenMark Test Navigator web application for publication environment (om-tn-pro) to output folder, with some exceptions -->
        <copy todir="${om-tn-pro-webapp.output}">
            <fileset dir="${om-tn-pro-webapp.input}">
                <exclude name="logs/**"/>
                <exclude name="questionbank/**"/>
                <exclude name="testbank/**"/>
                <exclude name="WEB-INF/security/**"/>
                <exclude name="WEB-INF/lib/**"/>
                <exclude name="${om-tn-pro.navigator.sample.name}"/>
                <exclude name="${om-tn-pro.navigator.conf.name}"/>
                <exclude name="WEB-INF/${om-tn-pro.server-config.web-inf.conf.name}"/>
                <exclude name="WEB-INF/${om-tn-pro.web.web-inf.conf.name}"/>
            </fileset>
        </copy>
    	<!-- Build trusted addresses for om-tn-pro -->
        <var name="om-tn-pro.trustedaddresses.addresses.var" value=""/>
        <for list="${om-tn-pro.trustedaddresses}" param="address">
            <sequential>
                <var name="om-tn-pro.trustedaddresses.addresses.var" value="${om-tn-pro.trustedaddresses.addresses.var}&lt;address&gt;@{address}&lt;/address&gt;" />
            </sequential>
        </for>
        <property name="om-tn-pro.trustedaddresses.addresses" value="${om-tn-pro.trustedaddresses.addresses.var}"/>
    	<!-- Build secure addresses for om-tn-pro -->
    	<var name="om-tn-pro.secureaddresses.addresses.var" value=""/>
        <for list="${om-tn-pro.secureaddresses}" param="address">
            <sequential>
                <var name="om-tn-pro.secureaddresses.addresses.var" value="${om-tn-pro.secureaddresses.addresses.var}&lt;address&gt;@{address}&lt;/address&gt;"/>
            </sequential>
        </for>
        <property name="om-tn-pro.secureaddresses.addresses" value="${om-tn-pro.secureaddresses.addresses.var}"/>
    	<!-- Build question engines urls for om-tn-pro -->
        <var name="om-tn-pro.questionengines.urls.var" value=""/>
        <for list="${om-tn-pro.questionengines}" param="url">
            <sequential>
                <var name="om-tn-pro.questionengines.urls.var" value="${om-tn-pro.questionengines.urls.var}&lt;url&gt;@{url}&lt;/url&gt;"/>
            </sequential>
        </for>
        <property name="om-tn-pro.questionengines.urls" value="${om-tn-pro.questionengines.urls.var}"/>
    	<!-- Build test navigators urls for om-tn-pro -->
        <var name="om-tn-pro.testnavigators.urls.var" value="&lt;url this=&quot;yes&quot;&gt;${om-tn-pro.this-testnavigator}&lt;/url&gt;"/>
        <for list="${om-tn-pro.additional-testnavigators}" param="url">
            <sequential>
                <var name="om-tn-pro.testnavigators.urls.var" value="${om-tn-pro.testnavigators.urls.var}&lt;url&gt;@{url}&lt;/url&gt;"/>
            </sequential>
        </for>
        <property name="om-tn-pro.testnavigators.urls" value="${om-tn-pro.testnavigators.urls.var}"/>
    	<!-- Build recipients and carbon copies email addreses for alert mails for om-tn-pro -->
    	<var name="om-tn-pro.alertmail.all-to-cc.var" value=""/>
        <for list="${om-tn-pro.alertmail.to}" param="to">
            <sequential>
                <var name="om-tn-pro.alertmail.all-to-cc.var" value="${om-tn-pro.alertmail.all-to-cc.var}&lt;to&gt;@{to}&lt;/to&gt;"/>
            </sequential>
        </for>
        <for list="${om-tn-pro.alertmail.cc}" param="cc">
            <sequential>
                <var name="om-tn-pro.alertmail.all-to-cc.var" value="${om-tn-pro.alertmail.all-to-cc.var}&lt;cc&gt;@{cc}&lt;/cc&gt;"/>
            </sequential>
        </for>
        <property name="om-tn-pro.alertmail.all-to-cc" value="${om-tn-pro.alertmail.all-to-cc.var}"/>
    	<!-- Build symmetric salted password for om-tn-pro -->
    	<if>
            <equals arg1="${om-tn-pro.encryption.password}" arg2=""/>
            <then>
                <property name="om-tn-pro.gepeq-decryption-password" value="&lt;!&#45;&#45; &lt;gepeq-decryption-password&gt;&lt;/gepeq-decryption-password&gt; &#45;&#45;&gt;"/>
            </then>
            <else>
                <property name="om-tn-pro.gepeq-decryption-password" value="&lt;gepeq-decryption-password&gt;${om-tn-pro.encryption.password}&lt;/gepeq-decryption-password&gt;"/>
            </else>
        </if>
    	<!-- Build authentication session duration for om-tn-pro -->
        <if>
            <equals arg1="${om-tn-pro.auth-session-expiry}" arg2=""/>
            <then>
                <property name="om-tn-pro.auth-session-expiry.config" value="&lt;!&#45;&#45; &lt;auth-session-expiry&gt;15m&lt;/auth-session-expiry&gt; &#45;&#45;&gt;"/>
            </then>
            <else>
                <property name="om-tn-pro.auth-session-expiry.config" value="&lt;auth-session-expiry&gt;${om-tn-pro.auth-session-expiry}&lt;/auth-session-expiry&gt;"/>
            </else>
        </if>
    	<!-- Build mail configuration for Gmail accounts for om-tn-pro -->
        <if>
            <equals arg1="${om-tn-pro.mail.config}" arg2="Gmail" casesensitive="false"/>
            <then>
                <property name="om-tn-pro.mail.config.gmail" value="&lt;config&gt;Gmail&lt;/config&gt;"/>
            </then>
            <else>
                <property name="om-tn-pro.mail.config.gmail" value="&lt;!&#45;&#45; &lt;config&gt;Gmail&lt;/config&gt; &#45;&#45;&gt;"/>
            </else>
        </if>
        <!-- Build mail configuration for Yahoo! Mail accounts for om-tn-pro -->
        <if>
            <equals arg1="${om-tn-pro.mail.config}" arg2="Yahoo! Mail" casesensitive="false"/>
            <then>
                <property name="om-tn-pro.mail.config.yahoo-mail" value="&lt;config&gt;Yahoo! Mail&lt;/config&gt;"/>
            </then>
            <else>
                <property name="om-tn-pro.mail.config.yahoo-mail" value="&lt;!&#45;&#45; &lt;config&gt;Yahoo! Mail&lt;/config&gt; &#45;&#45;&gt;"/>
            </else>
        </if>
        <!-- Build mail configuration for Hotmail accounts for om-tn-pro -->
        <if>
            <equals arg1="${om-tn-pro.mail.config}" arg2="Hotmail" casesensitive="false"/>
            <then>
                <property name="om-tn-pro.mail.config.hotmail" value="&lt;config&gt;Hotmail&lt;/config&gt;"/>
            </then>
            <else>
                <property name="om-tn-pro.mail.config.hotmail" value="&lt;!&#45;&#45; &lt;config&gt;Hotmail&lt;/config&gt; &#45;&#45;&gt;"/>
            </else>
        </if>
    	<!-- Build mail username for om-tn-pro -->
        <if>
            <equals arg1="${om-tn-pro.mail.username}" arg2=""/>
            <then>
                <property name="om-tn-pro.mail.username.config" value="&lt;!&#45;&#45; &lt;username&gt;&lt;/username&gt; &#45;&#45;&gt;"/>
            </then>
            <else>
                <property name="om-tn-pro.mail.username.config" value="&lt;username&gt;${om-tn-pro.mail.username}&lt;/username&gt;"/>
            </else>
        </if>
        <!-- Build mail password for om-tn-pro -->
        <if>
            <equals arg1="${om-tn-pro.mail.password}" arg2=""/>
            <then>
                <property name="om-tn-pro.mail.password.config" value="&lt;!&#45;&#45; &lt;password&gt;&lt;/password&gt; &#45;&#45;&gt;"/>
            </then>
            <else>
                <property name="om-tn-pro.mail.password.config" value="&lt;password&gt;${om-tn-pro.mail.password}&lt;/password&gt;"/>
            </else>
        </if>
    	<!-- Build mail host name for om-tn-pro -->
        <if>
            <equals arg1="${om-tn-pro.mail.hostname}" arg2=""/>
            <then>
                <if>
                    <equals arg1="${om-tn-pro.mail.config}" arg2="Gmail" casesensitive="false"/>
                    <then>
                        <property name="om-tn-pro.mail.hostname.config" value="&lt;!&#45;&#45; &lt;hostname&gt;smtp.gmail.com&lt;/hostname&gt; &#45;&#45;&gt;"/>
                    </then>
                    <elseif>
                        <equals arg1="${om-tn-pro.mail.config}" arg2="Yahoo! Mail" casesensitive="false"/>
                        <then>
                            <property name="om-tn-pro.mail.hostname.config" value="&lt;!&#45;&#45; &lt;hostname&gt;smtp.mail.yahoo.com&lt;/hostname&gt; &#45;&#45;&gt;"/>
                        </then>
                    </elseif>
                    <elseif>
                        <equals arg1="${om-tn-pro.mail.config}" arg2="Hotmail" casesensitive="false"/>
                        <then>
                            <property name="om-tn-pro.mail.hostname.config" value="&lt;!&#45;&#45; &lt;hostname&gt;smtp.live.com&lt;/hostname&gt; &#45;&#45;&gt;"/>
                        </then>
                    </elseif>
                    <else>
                        <property name="om-tn-pro.mail.hostname.config" value="&lt;!&#45;&#45; &lt;hostname&gt;&lt;/hostname&gt; &#45;&#45;&gt;"/>
                    </else>
                </if>
            </then>
            <else>
                <property name="om-tn-pro.mail.hostname.config" value="&lt;hostname&gt;${om-tn-pro.mail.hostname}&lt;/hostname&gt;"/>
            </else>
        </if>
    	<!-- Build mail port for om-tn-pro -->
        <if>
            <equals arg1="${om-tn-pro.mail.port}" arg2=""/>
            <then>
                <if>
                    <equals arg1="${om-tn-pro.mail.config}" arg2="Hotmail" casesensitive="false"/>
                    <then>
                        <property name="om-tn-pro.mail.port.config" value="&lt;!&#45;&#45; &lt;port&gt;587&lt;/port&gt; &#45;&#45;&gt;"/>
                    </then>
                    <else>
                        <property name="om-tn-pro.mail.port.config" value="&lt;!&#45;&#45; &lt;port&gt;25&lt;/port&gt; &#45;&#45;&gt;"/>
                    </else>
                </if>
            </then>
            <else>
                <property name="om-tn-pro.mail.port.config" value="&lt;port&gt;${om-tn-pro.mail.port}&lt;/port&gt;"/>
            </else>
        </if>
    	<!-- Build boolean flag for enabling (true) or disabling (false) SSL for mail for om-tn-pro -->
        <if>
            <equals arg1="${om-tn-pro.mail.ssl}" arg2=""/>
            <then>
                <if>
                    <equals arg1="${om-tn-pro.mail.config}" arg2="Gmail" casesensitive="false"/>
                    <then>
                        <property name="om-tn-pro.mail.ssl.config" value="&lt;!&#45;&#45; &lt;ssl&gt;true&lt;/ssl&gt; &#45;&#45;&gt;"/>
                    </then>
                    <elseif>
                        <equals arg1="${om-tn-pro.mail.config}" arg2="Yahoo! Mail" casesensitive="false"/>
                        <then>
                            <property name="om-tn-pro.mail.ssl.config" value="&lt;!&#45;&#45; &lt;ssl&gt;true&lt;/ssl&gt; &#45;&#45;&gt;"/>
                        </then>
                    </elseif>
                    <else>
                        <property name="om-tn-pro.mail.ssl.config" value="&lt;!&#45;&#45; &lt;ssl&gt;false&lt;/ssl&gt; &#45;&#45;&gt;"/>
                    </else>
                </if>
            </then>
            <else>
                <property name="om-tn-pro.mail.ssl.config" value="&lt;ssl&gt;${om-tn-pro.mail.ssl}&lt;/ssl&gt;"/>
            </else>
        </if>
    	<!-- Build boolean flag for starting (true) or not (false) TLS for mail for om-tn-pro -->
        <if>
            <equals arg1="${om-tn-pro.mail.start-tls}" arg2=""/>
            <then>
                <if>
                    <equals arg1="${om-tn-pro.mail.config}" arg2="Hotmail" casesensitive="false"/>
                    <then>
                        <property name="om-tn-pro.mail.start-tls.config" value="&lt;!&#45;&#45; &lt;start-tls&gt;true&lt;/start-tls&gt; &#45;&#45;&gt;"/>
                    </then>
                    <else>
                        <property name="om-tn-pro.mail.start-tls.config" value="&lt;!&#45;&#45; &lt;start-tls&gt;false&lt;/start-tls&gt; &#45;&#45;&gt;"/>
                    </else>
                </if>
            </then>
            <else>
                <property name="om-tn-pro.mail.start-tls.config" value="&lt;start-tls&gt;${om-tn-pro.mail.start-tls}&lt;/start-tls&gt;"/>
            </else>
        </if>
    	<!-- Build boolean flag for enabling (true) or disabling (false) mail debug mode for om-tn-pro -->
        <if>
            <equals arg1="${om-tn-pro.mail.debug}" arg2=""/>
            <then>
                <property name="om-tn-pro.mail.debug.config" value="&lt;!&#45;&#45; &lt;debug&gt;true&lt;/debug&gt; &#45;&#45;&gt;"/>
            </then>
            <else>
                <property name="om-tn-pro.mail.debug.config" value="&lt;debug&gt;${om-tn-pro.mail.debug}&lt;/debug&gt;"/>
            </else>
        </if>
    	<!-- Generates a new navigator.xml file from template replacing some values with the appropiated values and copy it to deploy output folder of OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
        <copy file="${om-tn-pro.navigator.conf}/${om-tn-pro.navigator.conf.name}" tofile="${om-tn-pro-webapp.output}/${om-tn-pro.navigator.conf.name}">
            <filterchain>
                <replacetokens>
                    <token key="om-tn-pro.navigator-db-plugin" value="${om-tn-pro.navigator-db-plugin}"/>
                    <token key="om-tn-pro.server" value="${om-tn-pro.server}"/>
                    <token key="om-tn-pro.dbname" value="${om-tn-pro.dbname}"/>
                    <token key="om-tn-pro.prefix" value="${om-tn-pro.prefix}"/>
                    <token key="om-tn-pro.username" value="${om-tn-pro.username}"/>
                    <token key="om-tn-pro.password" value="${om-tn-pro.password}"/>
                    <token key="om-tn-pro.trustedaddresses.addresses" value="${om-tn-pro.trustedaddresses.addresses}"/>
                    <token key="om-tn-pro.secureaddresses.addresses" value="${om-tn-pro.secureaddresses.addresses}"/>
                    <token key="om-tn-pro.navigator-auth-plugin" value="${om-tn-pro.navigator-auth-plugin}"/>
                    <token key="om-tn-pro.questionengines.urls" value="${om-tn-pro.questionengines.urls}"/>
                    <token key="om-tn-pro.testnavigators.urls" value="${om-tn-pro.testnavigators.urls}"/>
                    <token key="om-tn-pro.alertmail.from" value="${om-tn-pro.alertmail.from}"/>
                    <token key="om-tn-pro.alertmail.all-to-cc" value="${om-tn-pro.alertmail.all-to-cc}"/>
                    <token key="gepeq.server" value="${om-tn-pro.gepeq.server}"/>
                    <token key="gepeq.dbname" value="${om-tn-pro.gepeq.dbname}"/>
                    <token key="gepeq.username" value="${om-tn-pro.gepeq.username}"/>
                    <token key="gepeq.password" value="${om-tn-pro.gepeq.password}"/>
                    <token key="om-tn-pro.gepeq-decryption-password" value="${om-tn-pro.gepeq-decryption-password}"/>
                    <token key="om-tn-pro.auth-session-expiry.config" value="${om-tn-pro.auth-session-expiry.config}"/>
                    <token key="om-tn-pro.mail.config.gmail" value="${om-tn-pro.mail.config.gmail}"/>
                    <token key="om-tn-pro.mail.config.yahoo-mail" value="${om-tn-pro.mail.config.yahoo-mail}"/>
                    <token key="om-tn-pro.mail.config.hotmail" value="${om-tn-pro.mail.config.hotmail}"/>
                    <token key="om-tn-pro.mail.username.config" value="${om-tn-pro.mail.username.config}"/>
                    <token key="om-tn-pro.mail.password.config" value="${om-tn-pro.mail.password.config}"/>
                    <token key="om-tn-pro.mail.hostname.config" value="${om-tn-pro.mail.hostname.config}"/>
                    <token key="om-tn-pro.mail.port.config" value="${om-tn-pro.mail.port.config}"/>
                    <token key="om-tn-pro.mail.ssl.config" value="${om-tn-pro.mail.ssl.config}"/>
                    <token key="om-tn-pro.mail.start-tls.config" value="${om-tn-pro.mail.start-tls.config}"/>
                    <token key="om-tn-pro.mail.debug.config" value="${om-tn-pro.mail.debug.config}"/>
                </replacetokens>
            </filterchain>
        </copy>
    	<!-- Copy server-config.wsdd from template (no replacements needed) to WEB-INF folder within deploy output folder of OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
        <copy file="${om-tn-pro.server-config.web-inf.conf}/${om-tn-pro.server-config.web-inf.conf.name}" tofile="${om-tn-pro-webapp.output}/WEB-INF/${om-tn-pro.server-config.web-inf.conf.name}"/>
    	<!-- Generates a new web.xml file from template replacing some values with the appropiated values and copy it to WEB-INF folder within deploy output folder of OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
    	<copy file="${om-tn-pro.web.web-inf.conf}/${om-tn-pro.web.web-inf.conf.name}" tofile="${om-tn-pro-webapp.output}/WEB-INF/${om-tn-pro.web.web-inf.conf.name}">
            <filterchain>
                <replacetokens>
                    <token key="om-tn-pro.navigator-servlet" value="${om-tn-pro.navigator-servlet}"/>
                </replacetokens>
            </filterchain>
        </copy>
    	<!-- Copy needed libraries to WEB-INF/lib folder within deploy output folder of OpenMark Test Navigator web application for publication enviroment (om-tn-pro) -->
        <copy todir="${om-tn-pro-webapp.output}/WEB-INF/lib">
            <fileset file="${om-tn-pro.lib}/${om-tn-pro.lib.name}"/>
            <fileset file="${om.jaf.lib}/${om.jaf.lib.name}"/>
            <fileset file="${om.apple-java-ext.lib}/${om.apple-java-ext.lib.name}"/>
            <fileset file="${om.axis.lib}/${om.axis.lib.name}"/>
            <fileset file="${om.batik-anim.lib}/${om.batik-anim.lib.name}"/>
            <fileset file="${om.batik-awt-util.lib}/${om.batik-awt-util.lib.name}"/>
            <fileset file="${om.batik-css.lib}/${om.batik-css.lib.name}"/>
            <fileset file="${om.batik-dom.lib}/${om.batik-dom.lib.name}"/>
            <fileset file="${om.batik-ext.lib}/${om.batik-ext.lib.name}"/>
            <fileset file="${om.batik-parser.lib}/${om.batik-parser.lib.name}"/>
            <fileset file="${om.batik-svg-dom.lib}/${om.batik-svg-dom.lib.name}"/>
            <fileset file="${om.batik-util.lib}/${om.batik-util.lib.name}"/>
            <fileset file="${om.batik-xml.lib}/${om.batik-xml.lib.name}"/>
            <fileset file="${om.commons-cli.lib}/${om.commons-cli.lib.name}"/>
            <fileset file="${om.commons-discovery.lib}/${om.commons-discovery.lib.name}"/>
            <fileset file="${om.commons-io.lib}/${om.commons-io.lib.name}"/>
            <fileset file="${om.commons-lang.lib}/${om.commons-lang.lib.name}"/>
            <fileset file="${om.commons-logging.lib}/${om.commons-logging.lib.name}"/>
            <fileset file="${om.encryption.lib}/${om.encryption.lib.name}"/>
            <fileset file="${om.jaxrpc.lib}/${om.jaxrpc.lib.name}"/>
            <fileset file="${om.jazzy.lib}/${om.jazzy.lib.name}"/>
            <fileset file="${om.jeuclid-cli.lib}/${om.jeuclid-cli.lib.name}"/>
            <fileset file="${om.jeuclid-core.lib}/${om.jeuclid-core.lib.name}"/>
            <fileset file="${om.jeuclid-mathviewer.lib}/${om.jeuclid-mathviewer.lib.name}"/>
            <fileset file="${om.jeuclid-minimal.lib}/${om.jeuclid-minimal.lib.name}"/>
            <fileset file="${om.mail.lib}/${om.mail.lib.name}"/>
            <fileset file="${om.generic.db.lib}/${om.generic.db.lib.name}"/>
            <fileset file="${om.saaj.lib}/${om.saaj.lib.name}"/>
            <fileset file="${om.wsdl4j.lib}/${om.wsdl4j.lib.name}"/>
            <fileset file="${om.xml-apis.lib}/${om.xml-apis.lib.name}"/>
            <fileset file="${om.xml-apis-ext.lib}/${om.xml-apis-ext.lib.name}"/>
            <fileset file="${om.xmlgraphics.lib}/${om.xmlgraphics.lib.name}"/>
        </copy>
    	<!-- Copy questions samples jars to questionbank folder of deployed OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
        <for list="${om-tn-pro.navigator.questionbank.jars}" param="jar">
            <sequential>
                <propertycopy name="jar-to-copy" from="om-tn-pro.navigator.questionbank.@{jar}-jar.conf" override="true"/>
                <propertycopy name="jar-to-copy.name" from="om-tn-pro.navigator.questionbank.@{jar}-jar.conf.name" override="true"/>
                <copy file="${jar-to-copy}/${jar-to-copy.name}" todir="${om-tn-pro-webapp.output}/questionbank" />
            </sequential>
        </for>
    	<!-- Copy questions samples deploy files to testbank folder of deployed OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
        <for list="${om-tn-pro.navigator.testbank.questions}" param="question">
            <sequential>
                <propertycopy name="question.deploy" from="om-tn-pro.navigator.testbank.@{question}-question.deploy.conf" override="true"/>
                <propertycopy name="question.deploy.name" from="om-tn-pro.navigator.testbank.@{question}-question.deploy.conf.name" override="true"/>
                <copy file="${question.deploy}/${question.deploy.name}" todir="${om-tn-pro-webapp.output}/testbank"/>
            </sequential>
        </for>
    	<!-- Copy tests samples test/deploy files to testbank folder of deployed OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
        <for list="${om-tn-pro.navigator.testbank.tests}" param="test">
            <sequential>
                <propertycopy name="test.test" from="om-tn-pro.navigator.testbank.@{test}-test.test.conf" override="true"/>
                <propertycopy name="test.test.name" from="om-tn-pro.navigator.testbank.@{test}-test.test.conf.name" override="true"/>
                <propertycopy name="test.deploy" from="om-tn-pro.navigator.testbank.@{test}-test.deploy.conf" override="true"/>
                <propertycopy name="test.deploy.name" from="om-tn-pro.navigator.testbank.@{test}-test.deploy.conf.name" override="true"/>
                <copy file="${test.test}/${test.test.name}" todir="${om-tn-pro-webapp.output}/testbank"/>
                <copy file="${test.deploy}/${test.deploy.name}" todir="${om-tn-pro-webapp.output}/testbank"/>
            </sequential>
        </for>
        <if>
            <equals arg1="${om-tn-pro.encryption.enabled}" arg2="true"/>
            <then>
            	<!-- If om-tn-pro encryption is enabled we need to deploy private key to WEB-INF/security folder within deploy output folder of OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
                <copy file="${om-tn-pro.encryption.private-key}/${om-tn-pro.encryption.private-key.name}" todir="${om-tn-webapp.output}/WEB-INF/security"/>
                <chmod file="${om-tn-pro-webapp.output}/WEB-INF/security/${om-tn-pro.encryption.private-key.name}" perm="600"/>
            </then>
        </if>
        <if>
            <and>
                <not>
                    <equals arg1="${om-tn-pro.questionbank.gepeq-keep-from.folder}" arg2=""/>
                </not>
                <available file="${build.keep}/om-tn-pro/questionbank" type="dir"/>
            </and>
            <then>
                <!-- If needed copy some questions jars generated with OpenMark Authoring Tool to questionbank folder of deployed OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
                <copy todir="${om-tn-pro-webapp.output}/questionbank">
                    <fileset dir="${build.keep}/om-tn-pro/questionbank"/>
                </copy>
            </then>
        </if>
        <if>
            <and>
                <not>
                    <equals arg1="${om-tn-pro.testbank.gepeq-keep-from.folder}" arg2=""/>
                </not>
                <available file="${build.keep}/om-tn-pro/testbank" type="dir"/>
            </and>
            <then>
                <!-- If needed copy some questions/tests deploy/test xml files generated with OpenMark Authoring Tool to testbank folder of deployed OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
                <copy todir="${om-tn-pro-webapp.output}/testbank">
                    <fileset dir="${build.keep}/om-tn-pro/testbank"/>
                </copy>
            </then>
        </if>
        <if>
        	<and>
                <not>
                    <equals arg1="${om-tn-pro.logs.keep-from.folder}" arg2=""/>
                </not>
        		<available file="${build.keep}/om-tn-pro/logs" type="dir"/>
        	</and>
            <then>
            	<!-- If needed copy some logs to logs folder of deployed OpenMark Test Navigator web application for publication environment (om-tn-pro) -->
                <copy todir="${om-tn-pro-webapp.output}/logs">
                    <fileset dir="${build.keep}/om-tn-pro/logs"/>
                </copy>
            </then>
        </if>
    </target>
	
	<target description="Build and deploy all web applications needed by OpenMark Authoring Tool (GEPEQ)" name="deployall" depends="gepeq-webapp,om-webapp,om-qe-webapp,om-tn-webapp,om-qe-pro-webapp,om-tn-pro-webapp"/>
	
</project>
