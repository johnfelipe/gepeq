/* OpenMark Authoring Tool (GEPEQ)
 * Copyright (C) 2013 UNED
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package es.uned.lsi.gepec.model.entities;

//Generated 29-nov-2012 11:27:31 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

/**
 * ScoreType generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@SequenceGenerator(name="scoretypes_id_seq", sequenceName="scoretypes_id_seq") 
@Table(name = "scoretypes", schema = "public")
public class ScoreType implements java.io.Serializable {

	private long id;
	private String type;
	private Set<Test> tests = new HashSet<Test>(0);

	public ScoreType() {
	}

	public ScoreType(long id) {
		this.id = id;
	}

	public ScoreType(long id, String type, Set<Test> tests) {
		this.id = id;
		this.type = type;
		this.tests = tests;
	}

	@Id
	@GeneratedValue(generator="scoretypes_id_seq", strategy=GenerationType.AUTO)
	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@Column(name = "type", length = 30)
	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "scoreType")
	public Set<Test> getTests() {
		return this.tests;
	}

	public void setTests(Set<Test> tests) {
		this.tests = tests;
	}

	/**
	 * Set the fields of this score type with the values from fields from other score type.
	 * @param otherScoreType Other score type
	 */
	@Transient
	public void setFromOtherScoreType(ScoreType otherScoreType)
	{
		if (otherScoreType!=null)
		{
			setId(otherScoreType.getId());
			setType(otherScoreType.getType());
		}
	}

	@Override
	public boolean equals(Object obj)
	{
		return obj instanceof ScoreType && getId()==((ScoreType)obj).getId();
	}
}
