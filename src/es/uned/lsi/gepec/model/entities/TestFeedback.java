/* OpenMark Authoring Tool (GEPEQ)
 * Copyright (C) 2013 UNED
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package es.uned.lsi.gepec.model.entities;

//Generated 11-abr-2012 15:51:55 by Hibernate Tools 3.4.0.CR1

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

/**
 * TestFeedback generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@SequenceGenerator(name="testfeedbacks_id_seq", sequenceName="testfeedbacks_id_seq") 
@Table(name = "testfeedbacks", schema = "public")
public class TestFeedback implements java.io.Serializable {

	private long id;
	private Test test;
	private ScoreUnit scoreUnit;
	private Section section;
	private String text;
	private Integer minvalue;
	private Integer maxvalue;
	private int position;

	public TestFeedback() {
	}

	public TestFeedback(long id, Test test, int position) {
		this.id = id;
		this.test = test;
		this.position = position;
	}

	public TestFeedback(long id, Test test, ScoreUnit scoreUnit,
			Section section, String text, Integer minvalue, Integer maxvalue,
			int position) {
		this.id = id;
		this.test = test;
		this.scoreUnit = scoreUnit;
		this.section = section;
		this.text = text;
		this.minvalue = minvalue;
		this.maxvalue = maxvalue;
		this.position = position;
	}

	@Id
	@GeneratedValue(generator="testfeedbacks_id_seq", strategy=GenerationType.AUTO)
	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_test", nullable = false)
	public Test getTest() {
		return this.test;
	}

	public void setTest(Test test) {
		this.test = test;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_unit")
	public ScoreUnit getScoreUnit() {
		return this.scoreUnit;
	}

	public void setScoreUnit(ScoreUnit scoreUnit) {
		this.scoreUnit = scoreUnit;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_section")
	public Section getSection() {
		return this.section;
	}

	public void setSection(Section section) {
		this.section = section;
	}

	@Column(name = "text")
	public String getText() {
		return this.text;
	}

	public void setText(String text) {
		this.text = text;
	}

	@Column(name = "minvalue")
	public Integer getMinvalue() {
		return this.minvalue;
	}

	public void setMinvalue(Integer minvalue) {
		this.minvalue = minvalue;
	}

	@Column(name = "maxvalue")
	public Integer getMaxvalue() {
		return this.maxvalue;
	}

	public void setMaxvalue(Integer maxvalue) {
		this.maxvalue = maxvalue;
	}

	@Column(name = "position", nullable = false)
	public int getPosition() {
		return this.position;
	}

	public void setPosition(int position) {
		this.position = position;
	}

	/**
	 * Set the fields of this test feedback with the values from fields from other test feedback.
	 * @param otherTestFeedback Other test feedback
	 */
	@Transient
	public void setFromOtherTestFeedback(TestFeedback otherTestFeedback)
	{
		if (otherTestFeedback!=null)
		{
			setId(otherTestFeedback.getId());
			setTest(otherTestFeedback.getTest());
			setScoreUnit(otherTestFeedback.getScoreUnit());
			setSection(otherTestFeedback.getSection());
			setText(otherTestFeedback.getText());
			setMinvalue(otherTestFeedback.getMinvalue());
			setMaxvalue(otherTestFeedback.getMaxvalue());
			setPosition(otherTestFeedback.getPosition());
		}
	}
	
	@Override
	public boolean equals(Object obj)
	{
		boolean ok=false;
		if (obj instanceof TestFeedback)
		{
			if (getId()==0L)
			{
				if (getTest()==null)
				{
					ok=((TestFeedback)obj).getId()==0L && ((TestFeedback)obj).getTest()==null && 
						getPosition()==((TestFeedback)obj).getPosition();
				}
				else
				{
					ok=((TestFeedback)obj).getId()==0L && 
						getTest().equals(((TestFeedback)obj).getTest()) && 
						getPosition()==((TestFeedback)obj).getPosition();
				}
			}
			else
			{
				ok=getId()==((TestFeedback)obj).getId();
			}
		}
		return ok;
	}
}
