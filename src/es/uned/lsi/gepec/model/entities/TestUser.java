/* OpenMark Authoring Tool (GEPEQ)
 * Copyright (C) 2013 UNED
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package es.uned.lsi.gepec.model.entities;

//Generated 16-oct-2012 9:42:08 by Hibernate Tools 3.4.0.CR1

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

/**
* Testusers generated by hbm2java
*/
@SuppressWarnings("serial")
@Entity
@SequenceGenerator(name="testusers_id_seq", sequenceName="testusers_id_seq") 
@Table(name = "testusers", schema = "public")
public class TestUser implements java.io.Serializable {

	private long id;
	private Test test;
	private User user;
	private boolean omUser;
	private boolean omAdmin;

	public TestUser() {
	}

	public TestUser(long id, Test test, User user, boolean omUser,
			boolean omAdmin) {
		this.id = id;
		this.test = test;
		this.user = user;
		this.omUser = omUser;
		this.omAdmin = omAdmin;
	}

	@Id
	@GeneratedValue(generator="testusers_id_seq", strategy=GenerationType.AUTO)
	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_test")
	public Test getTest() {
		return this.test;
	}

	public void setTest(Test test) {
		this.test = test;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_user")
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Column(name = "om_user", nullable = false)
	public boolean isOmUser() {
		return this.omUser;
	}

	public void setOmUser(boolean omUser) {
		this.omUser = omUser;
	}

	@Column(name = "om_admin", nullable = false)
	public boolean isOmAdmin() {
		return this.omAdmin;
	}

	public void setOmAdmin(boolean omAdmin) {
		this.omAdmin = omAdmin;
	}
	
	/**
	 * Set the fields of this user of a test with the values from fields from other user of a test.
	 * @param otherTestUser Other user of a test
	 */
	@Transient
	public void setFromOtherTestUser(TestUser otherTestUser)
	{
		if (otherTestUser!=null)
		{
			setId(otherTestUser.getId());
			setTest(otherTestUser.getTest());
			setUser(otherTestUser.getUser());
			setOmUser(otherTestUser.isOmUser());
			setOmAdmin(otherTestUser.isOmAdmin());
		}
	}
	
	/**
	 * @return A copy of this user of a test.
	 */
	@Transient
	public TestUser getTestUserCopy()
	{
		return new TestUser(getId(),getTest(),getUser(),isOmUser(),isOmAdmin());
	}
	
	@Override
	public boolean equals(Object obj)
	{
		boolean ok=false;
		if (obj instanceof TestUser)
		{
			if (getId()==0L)
			{
				ok=((TestUser)obj).getId()==0L && getTest().equals(((TestUser)obj).getTest()) && 
					getUser().equals(((TestUser)obj).getUser()); 
			}
			else
			{
				ok=getId()==((TestUser)obj).getId();
			}
		}
		return ok;
	}
}
