/* OpenMark Authoring Tool (GEPEQ)
 * Copyright (C) 2013 UNED
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package es.uned.lsi.gepec.model.entities;

// Generated 08-jul-2011 10:08:42 by Hibernate Tools 3.4.0.CR1

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.SequenceGenerator;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Transient;

/**
 * Categoria generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@SequenceGenerator(name="categories_id_seq", sequenceName="categories_id_seq") 
@Table(name = "categories", schema = "public")
public class Category implements java.io.Serializable {

	private long id;
	private String name;
	private String description;
	private Category parent;
	private User user;
	private boolean defaultCategory;
	private CategoryType categoryType;
	private Visibility visibility;

	public Category() {
	}

	public Category(long id, String name, CategoryType categoryType, Visibility visibility) {
		this.id = id;
		this.name = name;
		this.description = "";
		this.defaultCategory = false;
		this.categoryType=categoryType;
		this.visibility=visibility;
	}

	public Category(long id, String name, String description, Category parent, User user, 
			boolean defaultCategory, CategoryType categoryType, Visibility visibility) {
		this.id = id;
		this.name = name;
		this.description = description;
		this.parent = parent;
		this.user = user;
		this.defaultCategory = defaultCategory;
		this.categoryType=categoryType;
		this.visibility=visibility;
	}

	@Id
	@GeneratedValue(generator="categories_id_seq", strategy=GenerationType.AUTO)
	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_user")
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Column(name = "name", nullable = false, length = 30)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_parent")
	public Category getParent() {
		return this.parent;
	}

	public void setParent(Category parent) {
		this.parent = parent;
	}

	@Column(name = "description", nullable = true)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}
	
	@Column(name = "default_category", nullable = false)
	public boolean isDefaultCategory() {
		return this.defaultCategory;
	}

	public void setDefaultCategory(boolean value) {
		this.defaultCategory = value;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_type")
	public CategoryType getCategoryType() {
		return this.categoryType;
	}

	public void setCategoryType(CategoryType categoryType) {
		this.categoryType = categoryType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_visibility")
	public Visibility getVisibility() {
		return this.visibility;
	}

	public void setVisibility(Visibility visibility) {
		this.visibility = visibility;
	}

	/**
	 * Set the fields of this category with the values from fields from other category.
	 * @param otherCategory Other category
	 */
	@Transient
	public void setFromOtherCategory(Category otherCategory)
	{
		if (otherCategory!=null)
		{
			setId(otherCategory.getId());
			setName(otherCategory.getName());
			setDescription(otherCategory.getDescription());
			setParent(otherCategory.getParent());
			setUser(otherCategory.getUser());
			setDefaultCategory(otherCategory.isDefaultCategory());
			setCategoryType(otherCategory.getCategoryType());
			setVisibility(otherCategory.getVisibility());
		}
	}
	
	/**
	 * @return A copy of this category.
	 */
	@Transient
	public Category getCategoryCopy()
	{
		return new Category(getId(),getName(),getDescription(),getParent(),getUser(),isDefaultCategory(),
			getCategoryType(),getVisibility());
	}
	
	@Override
	public boolean equals(Object obj)
	{
		return obj instanceof Category && getId()==((Category)obj).getId();
	}
}
