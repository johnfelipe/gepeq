/* OpenMark Authoring Tool (GEPEQ)
 * Copyright (C) 2013 UNED
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package es.uned.lsi.gepec.model.entities;

//Generated 16-may-2012 16:24:00 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

/**
* Categorytypes generated by hbm2java
*/
@SuppressWarnings("serial")
@Entity
@SequenceGenerator(name="categorytypes_id_seq", sequenceName="categorytypes_id_seq") 
@Table(name = "categorytypes", schema = "public")
public class CategoryType implements java.io.Serializable {

	private long id;
	private CategoryType parent;
	private String type;
	private String icon;
	private Set<Category> categories = new HashSet<Category>(0);

	public CategoryType() {
	}

	public CategoryType(long id) {
		this.id = id;
	}

	public CategoryType(long id, CategoryType parent, String type, String icon, 
			Set<Category> categories) {
		this.id = id;
		this.parent = parent;
		this.type = type;
		this.icon = icon;
		this.categories = categories;
	}

	@Id
	@GeneratedValue(generator="categorytypes_id_seq", strategy=GenerationType.AUTO)
	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_parent")
	public CategoryType getParent() {
		return this.parent;
	}

	public void setParent(CategoryType parent) {
		this.parent = parent;
	}

	@Column(name = "type", length = 30)
	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@Column(name = "icon", length = 100)
	public String getIcon() {
		return this.icon;
	}

	public void setIcon(String icon) {
		this.icon = icon;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "categoryType")
	public Set<Category> getCategories() {
		return this.categories;
	}

	public void setCategories(Set<Category> categories) {
		this.categories = categories;
	}

	/**
	 * Set the fields of this category type with the values from fields from other category type.
	 * @param otherCategoryType Other category type
	 */
	@Transient
	public void setFromOtherCategoryType(CategoryType otherCategoryType)
	{
		if (otherCategoryType!=null)
		{
			setId(otherCategoryType.getId());
			setParent(otherCategoryType.getParent());
			setType(otherCategoryType.getType());
			setIcon(otherCategoryType.getIcon());
		}
	}
	
	@Override
	public boolean equals(Object obj)
	{
		return obj instanceof CategoryType && getId()==((CategoryType)obj).getId();
	}
}
