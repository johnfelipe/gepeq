/* OpenMark Authoring Tool (GEPEQ)
 * Copyright (C) 2013 UNED
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package es.uned.lsi.gepec.model.entities;

// Generated 17-jul-2011 1:27:48 by Hibernate Tools 3.4.0.CR1

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

/**
 * Seccion generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@SequenceGenerator(name="sections_id_seq", sequenceName="sections_id_seq")
@Table(name = "sections", schema = "public")
public class Section implements java.io.Serializable {

	private long id;
	private Test test;
	private int order;
	private int randomQuantity;
	private boolean shuffle;
	private boolean random;
	private String name;
	private String title;
	private int weight;
	private List<QuestionOrder> questionOrders = new ArrayList<QuestionOrder>(0);

	public Section() {
	}

	public Section(long id, Test test, int order, int randomQuantity, 
			boolean shuffle, boolean random, String name, int weight) {
		this.id = id;
		this.test = test;
		this.order = order;
		this.randomQuantity = randomQuantity;
		this.shuffle = shuffle;
		this.name = name;
		this.weight = weight;
	}


	@Id
	@GeneratedValue(generator="sections_id_seq", strategy=GenerationType.AUTO)
	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_test")
	public Test getTest() {
		return this.test;
	}

	public void setTest(Test test) {
		this.test = test;
	}

	@Column(name = "section_order")
	public int getOrder() {
		return this.order;
	}

	public void setOrder(int order) {
		this.order = order;
	}

	@Column(name = "random_quantity", nullable = false)
	public int getRandomQuantity() {
		return this.randomQuantity;
	}

	public void setRandomQuantity(int questions) {
		this.randomQuantity = questions;
	}

	@Column(name = "shuffle", nullable = false)
	public boolean isShuffle() {
		return this.shuffle;
	}

	public void setShuffle(boolean shuffle) {
		this.shuffle = shuffle;
	}
	
	@Column(name = "random", nullable = false)
	public boolean isRandom() {
		return this.random;
	}

	public void setRandom(boolean random) {
		this.random = random;
	}

	@Column(name = "name", length = 15)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "title", length = 25)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "weight", nullable = false)
	public int getWeight() {
		return this.weight;
	}

	public void setWeight(int weight) {
		this.weight = weight;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "section", cascade = CascadeType.ALL)
	public List<QuestionOrder> getQuestionOrders() {
		return this.questionOrders;
	}

	public void setQuestionOrders(List<QuestionOrder> questionOrders) {
		this.questionOrders = questionOrders;
	}
	
	public void addQuestionOrder(QuestionOrder questionOrder)
	{
		getQuestionOrders().add(questionOrder);
		questionOrder.setOrder(getQuestionOrders().size());
		questionOrder.setSection(this);
	}
	
	public void removeQuestionOrder(int order)
	{
		getQuestionOrders().remove(order-1);
		
		//TODO asegurarnos de que esto sea correcto
		// We renumber other questions
		for (int i=0; i<getQuestionOrders().size();i++)
		{
			getQuestionOrders().get(i).setOrder(i+1);
		}
	}
	
	public void addQuestion(Question question)
	{
		QuestionOrder questionOrder=new QuestionOrder();
		questionOrder.setQuestion(question);
		questionOrder.setSection(this);
		questionOrder.setOrder(getQuestionOrders().size()+1);
		getQuestionOrders().add(questionOrder);
	}
	
	public void addQuestions(List<Question> questions)
	{
		for (Question question:questions)
		{
			addQuestion(question);
		}
	}
	
	/**
	 * Set the fields of this section with the values from fields from other section.
	 * @param otherSection Other section
	 */
	@Transient
	public void setFromOtherSection(Section otherSection)
	{
		if (otherSection!=null)
		{
			setId(otherSection.getId());
			setTest(otherSection.getTest());
			setOrder(otherSection.getOrder());
			setRandomQuantity(otherSection.getRandomQuantity());
			setShuffle(otherSection.isShuffle());
			setRandom(otherSection.isRandom());
			setName(otherSection.getName());
			setTitle(otherSection.getTitle());
			setWeight(otherSection.getWeight());
		}
	}
	
	/**
	 * @return A copy of this section.
	 */
	@Transient
	public Section getSectionCopy()
	{
		return new Section(
			getId(),getTest(),getOrder(),getRandomQuantity(),isShuffle(),isRandom(),getName(),getWeight());
	}
	
	@Override
	public boolean equals(Object obj)
	{
		boolean ok=false;
		if (obj instanceof Section)
		{
			if (getId()==0L)
			{
				ok=((Section)obj).getId()==0L && getOrder()==((Section)obj).getOrder();
			}
			else
			{
				ok=getId()==((Section)obj).getId();
			}
		}
		return ok;
	}
}
