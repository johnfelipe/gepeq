/* OpenMark Authoring Tool (GEPEQ)
 * Copyright (C) 2013 UNED
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package es.uned.lsi.gepec.model.entities;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;

/**
 * Question_multichoice generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "questions_multichoice", schema = "public")
@PrimaryKeyJoinColumn(name="id_question")
public class MultichoiceQuestion extends Question {
	private boolean single;
	private boolean shuffle;

	public MultichoiceQuestion() {
		super();
		this.single = true;
		this.shuffle = true;
		this.type = "MULTICHOICE";
		answers=new ArrayList<Answer>();
		addAnswer(new Answer());
		addAnswer(new Answer());
	}

	public MultichoiceQuestion(boolean single) {
		super();
		this.single = single;
	}

	public MultichoiceQuestion(boolean single, Boolean shuffle) {
		this.single = single;
		this.shuffle = shuffle;
	}

	@Column(name = "single", nullable = false)
	public boolean isSingle() {
		return this.single;
	}

	public void setSingle(boolean single) {
		this.single = single;
	}

	@Column(name = "shuffle", nullable = false)
	public Boolean getShuffle() {
		return this.shuffle;
	}

	public void setShuffle(Boolean shuffle) {
		this.shuffle = shuffle;
	}
	
	//TODO creo que no se usa... pensar si cambiar para que tenga en cuenta todos los recursos que dependen de este tipo de pregunta o si eliminar
	@Transient
	@Override
	public List<String> getResourceNames()
	{
		List<String> resourceNames = super.getResourceNames();
		
		for (Answer answer:getAnswers())
		{
			if (answer.getResource()!=null)
			{
				resourceNames.add(answer.getResource().getFileName());
			}
		}
		return resourceNames;
	}
	
	@Transient
	@Override
	public void setFromOtherQuestion(Question otherQuestion)
	{
		super.setFromOtherQuestion(otherQuestion);
		if (otherQuestion instanceof MultichoiceQuestion)
		{
			setSingle(((MultichoiceQuestion)otherQuestion).isSingle());
			setShuffle(((MultichoiceQuestion)otherQuestion).getShuffle());
		}
	}
}
