/* OpenMark Authoring Tool (GEPEQ)
 * Copyright (C) 2013 UNED
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package es.uned.lsi.gepec.model.entities;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;

//Generated 11-jun-2012 15:35:56 by Hibernate Tools 3.4.0.CR1

/**
 * DragDropAnswer generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "answers_dragdrop", schema = "public")
@PrimaryKeyJoinColumn(name="id_answer")
public class DragDropAnswer extends Answer {
	private boolean draggable;
	private int group;
	private Answer rightAnswer;

	public DragDropAnswer() {
		this(false, 1, null);
	}

	public DragDropAnswer(boolean draggable, int group) {
		this(draggable, group, null);
	}

	public DragDropAnswer(boolean draggable, int group, Answer rightAnswer) {
		super();
		this.draggable = draggable;
		this.group = group;
		this.rightAnswer = rightAnswer;
	}

	public DragDropAnswer(long id,Question question, Resource resource, int resourceWidth, int resourceHeight, 
			String text, Boolean correct, Boolean fixed, int position, String name, boolean draggable, 
			int group, Answer rightAnswer)
	{
		super(id, question, resource, resourceWidth, resourceHeight, text, correct, fixed, position, name);
		this.draggable = draggable;
		this.group = group;
		this.rightAnswer = rightAnswer;
	}

	@Column(name = "draggable", nullable = false)
	public boolean isDraggable() {
		return this.draggable;
	}

	public void setDraggable(boolean draggable) {
		this.draggable = draggable;
	}

	@Column(name = "dragdrop_group", nullable = false)
	public int getGroup() {
		return this.group;
	}

	public void setGroup(int group) {
		this.group = group;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_right")
	public Answer getRightAnswer() {
		return this.rightAnswer;
	}

	public void setRightAnswer(Answer rightAnswer) {
		this.rightAnswer = rightAnswer;
	}
	
	@Transient
	public int getRightAnswerPosition()
	{
		return rightAnswer==null?0:rightAnswer.getPosition();
	}
	
	public void setRightAnswerPosition(int rightAnswerPosition)
	{
		Answer rightAnswer=null;
		if (rightAnswerPosition>0 && question!=null && question instanceof DragDropQuestion)
		{
			rightAnswer=((DragDropQuestion)question).getDraggableItem(group,rightAnswerPosition);
		}
		setRightAnswer(rightAnswer);
	}

	@Transient
	@Override
	public void setFromOtherAnswer(Answer otherAnswer)
	{
		super.setFromOtherAnswer(otherAnswer);
		if (otherAnswer instanceof DragDropAnswer)
		{
			setDraggable(((DragDropAnswer)otherAnswer).isDraggable());
			setGroup(((DragDropAnswer)otherAnswer).getGroup());
			setRightAnswer(((DragDropAnswer)otherAnswer).getRightAnswer());
		}
	}
	
	@Transient
	@Override
	public String getOmId()
	{
		StringBuffer omId=new StringBuffer(isDraggable()?"draggableitem":"answer");
		omId.append(getGroup());
		omId.append('_');
		omId.append(getPosition());
		return omId.toString();
	}
	
	@Override
	public boolean equals(Object obj)
	{
		boolean ok=false;
		if (obj instanceof DragDropAnswer)
		{
			if (getId()==0L)
			{
				if (getQuestion()==null)
				{
					ok=((DragDropAnswer)obj).getId()==0L && ((DragDropAnswer)obj).getQuestion()==null &&
					isDraggable()==((DragDropAnswer)obj).isDraggable() && 
					getGroup()==((DragDropAnswer)obj).getGroup() && 
					getPosition()==((DragDropAnswer)obj).getPosition();
				}
				else
				{
					ok=((DragDropAnswer)obj).getId()==0L && 
					getQuestion().equals(((DragDropAnswer)obj).getQuestion()) &&
					isDraggable()==((DragDropAnswer)obj).isDraggable() && 
					getGroup()==((DragDropAnswer)obj).getGroup() && 
					getPosition()==((DragDropAnswer)obj).getPosition();
				}
			}
			else
			{
				ok=getId()==((DragDropAnswer)obj).getId();
			}
		}
		return ok;
	}
}
